\input texinfo @c -*-texinfo-*-
@c %**start of header
@documentencoding UTF-8

@setfilename blackjack.info
@set UPDATED February 20, 2020
@set VERSION v0.1.73-g340abaf+Δ

@copying
This manual is for LibreBlackjack (version @value{VERSION}, @value{UPDATED}),
which is a completely free-as-in-freedom blackjack engine designed to
study and analyze the game statistics using different playing strategies
ranging from simple card counting up to other complex algorithms based
on artificial intelligence..

Copyright @copyright{} 2016-2020 Jeremy Theler.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Libre@ Blackjack
@subtitle A free blackjack back end, v0.1.73-g340abaf+Δ
@author Jeremy Theler
February 20, 2020
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Libre@ Blackjack

@menu
* Overview::
* Running blackjack::
* Configuration file::
* Commands::
* Internal player::
* Example automated players::
@end menu

@node Overview
@chapter Overview
@anchor{#overview}
LibreBlackjack is a blackjack engine that emulates a dealer, deals
(digital) cards and understands plain-text commands such as @code{hit}
or @code{stand}. The basic idea is that one or more players can talk to
LibreBlackjack either in an interactive or in an automated way through

@itemize
@item
the standard input and/or output,
@item
named pipes,
@item
POSIX message queues,
@item
TCP (web)sockets (using @code{netcat} or @code{gwsocket}), or
@item
dynamically loaded arbitrary routines from shared objects.
@end itemize

These players can be actual human players playing in real-time through a
front end (a GUI application, a web-based interface, a mobile app, etc.)
or robots that implement a certain betting and playing strategy playing
(i.e.@ card counting) as fast as possible to study and analyze game
statistics. There is an internal player that reads the strategy from a
text file and plays accordingly. It can also be used to play interactive
ASCII blackjack.

@float
@image{ascii,,,Interactive ASCII (actually UTF-8) blackjack,png}
@caption{Interactive ASCII (actually UTF-8) blackjack}
@end float

@node Running blackjack
@chapter Running @code{blackjack}
@anchor{#running-blackjack}

@menu
* Invocation::
* Interactive game::
* Automated playing::
@end menu

@node Invocation
@section Invocation
@anchor{#invocation}
The format for running the @code{blackjack} program is:

@verbatim
blackjack [options] [path_to_conf_file]
@end verbatim

If no configuration file is given, a file named @code{blackjack.conf} in
the current directory is used, provided it exists. With no options and
no configuration file, @code{blackjack} starts in interactive mode and
it is ready to start a blackjack game.

The @code{blackjack} executable supports the following options:

@table @asis
@item @code{-h number} or @code{--hands=number}

Specify the number of hands to play. Corresponds to the @code{hands}
variable in the @ref{#configuration-file,configuration file}.

@item @code{-d number} or @code{--decks=number}

Specify the number of decks to use in the shoe. Corresponds to the
@code{decks} variable in the @ref{#configuration-file,configuration
file}.

@item @code{--flatbet}

Do not ask for the amount to bet before starting a new hand and use a
flat unit bet.

@item @code{-i} or @code{--internal}

Use the internal player to play against itself. See
@ref{#internal-player,internal player} for details.

@item @code{-h} or @code{--help}

Print this informative help message on standard output and exit
successfully.

@item @code{-v} or @code{--version}

Print the version number and licensing information of Hello on standard
output and then exit successfully.

@end table

@node Interactive game
@section Interactive game
@anchor{#interactive-game}

@node Automated playing
@section Automated playing
@anchor{#automated-playing}

@node Configuration file
@chapter Configuration file
@anchor{#configuration-file}
@table @asis
@item @code{blackjack_pays}

Blackjack payout ratio

Set how much a blackjack received by the player pays. It can be either a
textual @code{3/2} or @code{6/5} or any floating-point number.

@strong{Default:}

@item @code{burnt_cards}

Number of burnt cards when starting a new shoe.

When a new shoe is started, this number of cards are burned by the
dealer. Statistically this number does not have any effect, it is
provided for the sake of completeness.

@strong{Default:} No cards are burned.

@item @code{decks}

Number of decks in the shoe.

A value of -1 corresponds ``infinite'' which means sample a random card
instead of actually shuffling a real shoe and drawing a card from it

@strong{Default:} 6

@item @code{double_after_split}

Double after split

Set if the player is allowed to double after splitting. A value of zero
means not allowed and a non-zero means allowed. This variable can also
be shortened as @code{das}.

@strong{Default:} Allowed

@item @code{hands}

Number of hands to play.

After the prescribed number of hands have been played, the execution
ends. A scientific notation number can be given to avoid issues with too
many zeros. So one million hands can be written either as @code{1000000}
or as @code{1e6}.

@strong{Default:} One million

@item @code{hit_soft_17}

Hit soft seventeens

Set if the dealer must hit on soft 17s or not. A value of zero means
dealer must stand and a non-zero means dealer must hit. This variable
can also be shortened as @code{h17}.

@strong{Default:} Dealer must hit soft 17s.

@item @code{max_bet}

Maximum allowed bet

Integer that limits the player's bet with respect to a minimum value of
one. A value of zero means no limit.

@strong{Default:} No limit

@item @code{penetration}

Fraction of the shoe where the cut card is (randomnly) placed

This variable controls the percentage of the shoe which is used for
playing before re-shuffling. The cut card is placed by the dealer with a
gaussian random distribution centered at this fraction @math{\in [0:1]}
and standard deviation contrlled by @code{penetration_sigma}. The hand
in which the cut card appears is finished and a new show is started. If
the value is zero, the sho is reshuffled after each hand.

@strong{Default:} 0.75

@item @code{penetration_sigma}

Standard deviation of the distribution of the fraction that controls the
location of the cut card.

This variable gives the standard deviation of the random distribution
used to place the cut card in the shoe before re-shuffling. The cut card
is placed by the dealer with a gaussian random distribution centered at
the fraction @math{\in [0:1]} given by @code{penetration} and standard
deviation given by this value.

@strong{Default:} 0.05

@item @code{rng_seed}

Random number generator seed.

The seed used by the RNG in charge of shuffling the shoe (or sampling
from an infinite deck if @code{decks}=-1). This can be used to have
repeteability in the order of the dealt cards.

@strong{Default:} Get seed from @code{/dev/urandom}.

@end table

@node Commands
@chapter Commands
@anchor{#commands}

@node Internal player
@chapter Internal player
@anchor{#internal-player}

@node Example automated players
@chapter Example automated players
@anchor{#example-automated-players}

@bye

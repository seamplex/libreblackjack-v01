\input texinfo @c -*-texinfo-*-
@c %**start of header
@documentencoding UTF-8

@setfilename blackjack.info
@set UPDATED February 20, 2020
@set VERSION v0.1.73-g340abaf+Î”

@copying
This manual is for LibreBlackjack (version @value{VERSION}, @value{UPDATED}),
which is a completely free-as-in-freedom blackjack engine designed to
study and analyze the game statistics using different playing strategies
ranging from simple card counting up to other complex algorithms based
on artificial intelligence..

Copyright @copyright{} 2016-2020 Jeremy Theler.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with no Front-Cover Texts, and with no Back-Cover
Texts.  A copy of the license is included in the section entitled
``GNU Free Documentation License''.
@end quotation
@end copying

@ifnottex
@paragraphindent 0
@end ifnottex
@titlepage
@title Libre@ Blackjack
@subtitle A free blackjack back end, v0.1.73-g340abaf+Î”
@author Jeremy Theler
February 20, 2020
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@node Top
@top Libre@ Blackjack

@menu
* Overview::
* Running blackjack::
* Configuration file::
* Commands::
* Results::
* Example automated players::
@end menu

@node Overview
@chapter Overview
@anchor{#overview}
LibreBlackjack is a blackjack engine that emulates a dealer, deals
(digital) cards and understands plain-text commands such as @code{hit}
or @code{stand}. The basic idea is that one or more players can talk to
LibreBlackjack either in an interactive or in an automated way through

@itemize
@item
the standard input and/or output,
@item
named pipes,
@item
POSIX message queues,
@item
TCP (web)sockets (using @code{netcat} or @code{gwsocket}), or
@item
dynamically loaded arbitrary routines from shared objects.
@end itemize

These players can be actual human players playing in real-time through a
front end (a GUI application, a web-based interface, a mobile app, etc.)
or robots that implement a certain betting and playing strategy playing
(i.e.@ card counting) as fast as possible to study and analyze game
statistics. There is an internal player that reads the strategy from a
text file and plays accordingly. It can also be used to play interactive
ASCII blackjack.

@float
@image{ascii,,,Interactive ASCII (actually UTF-8) blackjack,png}
@caption{Interactive ASCII (actually UTF-8) blackjack}
@end float

@node Running blackjack
@chapter Running @code{blackjack}
@anchor{#running-blackjack}

@menu
* Invocation::
* Interactive game::
* Automatic internal player::
* Automated playing through IPC::
@end menu

@node Invocation
@section Invocation
@anchor{#invocation}
The format for running the @code{blackjack} program is:

@verbatim
blackjack [options] [path_to_conf_file]
@end verbatim

If no configuration file is given, a file named @code{blackjack.conf} in
the current directory is used, provided it exists. With no options and
no configuration file, @code{blackjack} starts in interactive mode and
it is ready to start a blackjack game.

The @code{blackjack} executable supports the following options:

@table @asis
@item @code{-n}@math{n} or @code{--hands=}@math{n}

Specify the number of hands to play. Corresponds to the @code{hands}
variable in the @ref{#configuration-file,configuration file}.

@item @code{-d}@math{n} or @code{--decks=}@math{n}

Specify the number of decks to use in the shoe. Corresponds to the
@code{decks} variable in the @ref{#configuration-file,configuration
file}.

@item @code{-f} or @code{--flatbet}

Do not ask for the amount to bet before starting a new hand and use a
flat unit bet. Corresponds to the @code{flat_bet} variable in the
@ref{#configuration-file,configuration file}.

@item @code{--}configuration_variable@code{[=}@emph{value}@code{]}

Any configuration variable from the
@ref{#configuration-file,configuration file} can be set from the command
line. For example, passing @code{--no_insurance} is like setting
@code{no_insurance = 1} in the configuration file. Command-line options
override configuration options.

@item @code{-i} or @code{--internal}

Use the internal player to play against itself. See
@ref{#internal-player,internal player} for details.

@item @code{-h} or @code{--help}

Print this informative help message on standard output and exit
successfully.

@item @code{-v} or @code{--version}

Print the version number and licensing information of Hello on standard
output and then exit successfully.

@end table

@node Interactive game
@section Interactive game
@anchor{#interactive-game}

@node Automatic internal player
@section Automatic internal player
@anchor{#automatic-internal-player}

@node Automated playing through IPC
@section Automated playing through IPC
@anchor{#automated-playing-through-ipc}

@menu
* Standard input/output::
* FIFO named pipes::
* POSIX message queues::
* POSIX shared memory objects::
* TCP through netcat::
@end menu

@node Standard input/output
@subsection Standard input/output
@anchor{#standard-inputoutput}

@node FIFO named pipes
@subsection FIFO named pipes
@anchor{#fifo-named-pipes}

@node POSIX message queues
@subsection POSIX message queues
@anchor{#posix-message-queues}

@node POSIX shared memory objects
@subsection POSIX shared memory objects
@anchor{#posix-shared-memory-objects}

@node TCP through netcat
@subsection TCP (through @code{netcat})
@anchor{#tcp-through-netcat}

@node Configuration file
@chapter Configuration file
@anchor{#configuration-file}
Libre@ Blackjacks reads a configuration file that contains

@itemize
@item
settings about the rules of the game
@itemize
@item
number of decks,
@item
whether if the dealer has to hit soft seventeen or not,
@item
blackjack payout,
@item
maximum bet allowed,
@item
etc@dots{}
@end itemize

@item
how the player is supposed to play
@itemize
@item
number of hands
@item
whether a flat or variable bet is going to be used,
@item
etc@dots{}
@end itemize

@item
if there are any particular shoe arrangement, i.e.@ a predefined set of
cards dealt in a certain order for instance to play one million hands of
a sixteen against a dealer's ten
@item
what kind of information is shown in the interactive session
@itemize
@item
if ASCII-art cards are supposed to be shown,
@item
a real-time delay to make the game smoother,
@item
etc.
@end itemize

@item
how the automated player communicates with the dealer
@itemize
@item
using standard input/output,
@item
FIFO named pipes,
@item
POSIX message queues,
@item
POSIX shared memory,
@item
etc@dots{}
@end itemize

@end itemize

The location of the configuration file can be given in the command line.
If none is provided, a file named @code{blackjack.conf} in the current
directory is used. If such file does not exists, the defaults values of
each variable are used. Individual variables can be set from the command
line by passing one or more times the option
@code{--}configuration_variable@code{[=}@emph{value}@code{]} in the
@ref{#invocation,invocation}.

Comments can be inserted using either a hash @code{#} or a colon
@code{;}. The following configuration file is the default provided in
the main distribution tarball:

@verbatim
# Default LibreÂ Blackjack configuration file

card_format = utf8_single   # either utf8, utf8_single, ascii, value or tag  
# utf8,         one ascii char for the rank and one utf8 representation
#               of the suit â™ ,â™¥,â™¦,â™£
# utf8_single,  a single utf8 entity for the card, i.e. ðŸƒž ðŸƒŠ ðŸƒ— ðŸ‚± ...
# ascii,        two ascii chars, one for the rank A,2,...,T,J,Q,J
#               and one for the suit S,H,D,C
# value,        the value for the game, A = 11, J,Q,K=10 or face number
# tag,          integer between 1-52, suit between 0-3,
#               rank between 1-13: tag = 13*suit + rank

# uncomment the following line to arrange cards
# arranged_cards = 1 5 14 9 27

flat_bet = 1       # do not ask for bets
no_insurance = 1   # do not ask for insurance
decks = 1          # number of decks, negative means infinite
@end verbatim

@menu
* Variables and values::
@end menu

@node Variables and values
@section Variables and values
@anchor{#variables-and-values}
@table @asis
@item @code{blackjack_pays}

Blackjack payout ratio

Set how much a blackjack received by the player pays. It can be either a
textual @code{3/2} or @code{6/5} or any floating-point number.

@strong{Default:} @code{3/2}

@item @code{burnt_cards}

Number of burnt cards when starting a new shoe.

When a new shoe is started, this number of cards are burned by the
dealer. Statistically this number does not have any effect, it is
provided for the sake of completeness.

@strong{Default:} No cards are burned.

@item @code{decks}

Number of decks in the shoe.

A value of -1 corresponds ``infinite'' which means sample a random card
instead of actually shuffling a real shoe and drawing a card from it

@strong{Default:} 6

@item @code{double_after_split}

Double after split

Set if the player is allowed to double after splitting. A value of zero
means not allowed and a non-zero means allowed. This variable can also
be shortened as @code{das}.

@strong{Default:} Allowed

@item @code{hands}

Number of hands to play.

After the prescribed number of hands have been played, the execution
ends. A scientific notation number can be given to avoid issues with too
many zeros. So one million hands can be written either as @code{1000000}
or as @code{1e6}.

@strong{Default:} One million

@item @code{hit_soft_17}

Hit soft seventeens

Set if the dealer must hit on soft 17s or not. A value of zero means
dealer must stand and a non-zero means dealer must hit. This variable
can also be shortened as @code{h17}.

@strong{Default:} Dealer must hit soft 17s.

@item @code{max_bet}

Maximum allowed bet

Integer that limits the player's bet with respect to a minimum value of
one. A value of zero means no limit.

@strong{Default:} No limit

@item @code{penetration}

Fraction of the shoe where the cut card is (randomnly) placed

This variable controls the percentage of the shoe which is used for
playing before re-shuffling. The cut card is placed by the dealer with a
gaussian random distribution centered at this fraction @math{\in [0:1]}
and standard deviation contrlled by @code{penetration_sigma}. The hand
in which the cut card appears is finished and a new show is started. If
the value is zero, the sho is reshuffled after each hand.

@strong{Default:} 0.75

@item @code{penetration_sigma}

Standard deviation of the distribution of the fraction that controls the
location of the cut card.

This variable gives the standard deviation of the random distribution
used to place the cut card in the shoe before re-shuffling. The cut card
is placed by the dealer with a gaussian random distribution centered at
the fraction @math{\in [0:1]} given by @code{penetration} and standard
deviation given by this value.

@strong{Default:} 0.05

@item @code{rng_seed}

Random number generator seed.

The seed used by the RNG in charge of shuffling the shoe (or sampling
from an infinite deck if @code{decks}=-1). This can be used to have
repeteability in the order of the dealt cards.

@strong{Default:} Get seed from @code{/dev/urandom}.

@end table

@node Commands
@chapter Commands
@anchor{#commands}
The dealer (he) and the player (she) ``talk'' through commands, which
are ASCII strings sent through any of the different IPC mechanisms
discussed in @ref{#automated-playing-through-ipc,Automated playing
through IPC}. In the most basic case, a human player reads commands from
the dealer from @code{blackjack}'s standard output and writes her
commands into the dealer's standard input. Those commands from the
dealer that require a particular action from the player end with a
quotation sign such as @code{bet?}, @code{insurance?} or @code{play?}.

All numerical values such as hand totals or bankrolls are given as
decimal ASCII strings.

@menu
* From the dealer to the player::
* From the player to the dealer::
@end menu

@node From the dealer to the player
@section From the dealer to the player
@anchor{#from-the-dealer-to-the-player}

@node From the player to the dealer
@section From the player to the dealer
@anchor{#from-the-player-to-the-dealer}
The following commands are available for the player for playing her
hand.

@table @asis
@item @code{double}

Double down on the current hand

The player adds the same amount waged on the current hand and in
exchange she receives only one hand. Doubling down is allowed only after
receiving the first two cards. This command can be abbreviated as
@code{d}.

@item @code{hit}

Hit on the current hand

This command can be abbreviated as @code{h}.

@item @code{split}

Split the current hand

This command can be abbreviated as @code{p} (for pair).

@item @code{stand}

Stand on the current hand

When the player stands on a hand, the dealer moves on to the next one.
If the player had split, a new card is dealt to the next split hand if
there is one. Otherwise the dealer reveals his hole card and deals
himself more cards if needed. This command can be abbreviated as
@code{s}.

@end table

The following are general commands in the sense that they can be sent
from the player to the dealer at any moment of the game.

@table @asis
@item @code{bankroll}

Ask what the player's bankroll is

Returns the current player's bankroll as an ASCII string.

@item @code{count}

Ask what the player's current hand adds to.

If for some reason the player cannot determine what the cards add to,
she can ask the dealer with this command. The result is an ASCII string
with the decimal value of the count. If the hand is soft, the number is
negative.@*
For example, a face and a six receives@ @code{16} while an ace and a
five receives@ @code{-16}.

@item @code{hands}

Ask how many hands have been played so far

Returns the number of played hands as an ASCII string.

@item @code{help}

Ask for help

A succinct help message is written on the standard output. This command
makes sense only when issued by a human player.

@item @code{quit}

Finish the game

Upon receiving this command, the game is finished immediately without
even finishing the hand. All IPC resources are unlocked, removed and/or
destroyed. The YAML report is written before exiting.

@item @code{table}

Ask what the current table looks like

The cards dealt so far in the current hand is written to the standard
output.@*
This command makes sense only when issued by a human player.

@item @code{upcard_value}

Ask what the dealer's upcard value is

The upcard value is sent after being dealt. Yet if the player needs to
know which is the upcard value, she can ask with this command. An ace is
returned as @code{11}.

@end table

@node Results
@chapter Results
@anchor{#results}

@menu
* Rules::
* CPU::
* Player::
@end menu

@node Rules
@section Rules
@anchor{#rules}

@node CPU
@section CPU
@anchor{#cpu}

@node Player
@section Player
@anchor{#player}

@node Example automated players
@chapter Example automated players
@anchor{#example-automated-players}
The directory @code{players} contains a few examples of automated
player, which are discussed in the following sections. A script
@code{check.sh} runs some of them and compares the expected value of the
bankroll relative to the number of hands which each player obtains with
the theoretical expected value (according to the game rules and player's
strategy) within an allowed statistical uncertainty. This scripts writes
the following table (actual values might vary depending on the random
nature of the game):

@multitable {Mimic the dealer} {Expected} {-0.0063655} {0.00308971} {4.7e+04} {Status} 
@headitem 
Case
 @tab Expected
 @tab Result
 @tab Error
 @tab Speed
 @tab Status
@item 
Internal player
 @tab -0.004
 @tab -0.0063655
 @tab 0.00115252
 @tab 4.6e+05
 @tab ok
@item 
Always stand
 @tab -0.150
 @tab -0.15437
 @tab 0.00313903
 @tab 2.3e+05
 @tab ok
@item 
No-bust strategy
 @tab -0.075
 @tab -0.08301
 @tab 0.00314665
 @tab 4.3e+04
 @tab ok
@item 
Mimic the dealer
 @tab -0.055
 @tab -0.059815
 @tab 0.00308971
 @tab 4.7e+04
 @tab ok
@end multitable

The columns are

@enumerate 
@item
Case name, as discussed below.
@item
Expected theoretical result in absolute units (i.e.@ -0.004 means -0.4%)
@item
Actual result obtained by Libre@ Blackjack in absolute units
@item
Estimated error equal to the standard deviation of the result
@item
Number of played hands per second
@item
Whether the result coincides or not with the theoretical value
@end enumerate

@menu
* Internal player::
* Always stand::
* No-bust strategy::
* Mimic the dealer::
* Derivation of the basic strategy::
@end menu

@node Internal player
@section Internal player
@anchor{#internal-player}
If @code{blackjack} is called with the @code{-i} option, it uses an
@emph{internal} player to play against itself. By default it plays basic
strategy. Run

@verbatim
blackjack -i
@end verbatim

and you will get the following report with the results of playing one
million hands with basic strategy.

@verbatim
---
rules:
  decks:                  6
  hands:                  1e+06
  hit_soft_17:            1
  double_after_split:     1
  blackjack_pays:         1.5
  rng_seed:               -421186149
  number_of_burnt_cards:  0
  no_negative_bankroll:   0
  max_bet:                0
  penetration:            0.75
  penetration_sigma:      0.05
cpu:
  user:             1.88959
  system:           0.32027
  wall:             2.20904
  second_per_hand:  2.2e-06
  hands_per_second: 4.5e+05
player: 
  wins:               0.445075
  pushes:             0.087039
  losses:             0.492821
  dealer_blackjacks:  0.047582
  player_blackjacks:  0.047375
  dealer_busts:       0.23537
  player_busts:       0.160637
  doubled_hands:      0.107207
  doubled_wins:       0.0613
  insured_hands:      0
  insured_wins:       0
  number_of_hands:    1e+06
  number_of_shuffles: 23215
  total_money_waged:  1.23935e+06
  worst_bankroll:     -7212.5
  final_bankroll:     -7111
  return:             -0.007111
  variance:            1.32892
  deviation:           1.15279
  error:               0.00115279
  result:             "(-0.7 Â± 0.2) %"
...
@end verbatim

@node Always stand
@section Always stand
@anchor{#always-stand}
To play Blackjack as an ``always-stander'' run the following command:

@verbatim
yes stand | blackjack -n1e5 --flat_bet --no_insurance > /dev/null
@end verbatim

The UNIX command @code{yes stand} writes the string ``stand'' repeteadly
to the standard output, which is piped to the executable
@code{blackjack} (assumed to be installed system-wide). The arguments
tell Libre@ Blackjack to play one hundred thousand hands (@code{-n1e5})
using a flat bet (@code{flat_bet}, it defaults to a unit bet in each
hand) and without asking for insurance if the dealer shows an ace
(@code{no_insurance}). As there is no @code{blackjack.conf} file, the
rules are---as expected---the default ones (see the documentation for
details).

The @code{/dev/null} part is important, otherwise Libre@ Blackjack will
think that there is a human at the other side of the table and will

@enumerate 
@item
run slower (it will add explicit time delays to mimic an actual human
dealer), and
@item
give all the details of the dealt hands in the terminal as ASCII
(actually UTF-8) art
@end enumerate

This example is only one-way (i.e.@ the player ignores what the dealer
says) so it is better to redirect the standard output to
@code{/dev/null} to save execution time. The results are written as a
@uref{http://yaml.org/,YAML}-formatted data to @code{stderr} by default
once the hands are over, so they will show up in the terminal
nevertheless. This format is human-friendly (far more than JSON) so it
can be easily parsed, but it also allows complex objects to be
represented (arrays, lists, etc.).

@verbatim
---
rules:
  decks:                  6
  hands:                  100000
  hit_soft_17:            1
  double_after_split:     1
  blackjack_pays:         1.5
  rng_seed:               -2067081387
  number_of_burnt_cards:  0
  no_negative_bankroll:   0
  max_bet:                0
  penetration:            0.75
  penetration_sigma:      0.05
cpu:
  user:             0.238384
  system:           0.226465
  wall:             0.462519
  second_per_hand:  4.6e-06
  hands_per_second: 2.2e+05
player: 
  wins:               0.38547
  pushes:             0.04744
  losses:             0.56709
  dealer_blackjacks:  0.04749
  player_blackjacks:  0.04803
  dealer_busts:       0.27168
  player_busts:       0
  doubled_hands:      0
  doubled_wins:       0
  insured_hands:      0
  insured_wins:       0
  number_of_hands:    100000
  number_of_shuffles: 2070
  total_money_waged:  100000
  worst_bankroll:     -15870.5
  final_bankroll:     -15868
  return:             -0.15868
  variance:            0.984727
  deviation:           0.992334
  error:               0.00313804
  result:             "(-15.9 Â± 0.6) %"
...
@end verbatim

@quotation
@strong{Exercise:} verify that the analytical probability of getting a
natural playing with a single deck (for both the dealer and the player)
is 32/663 = 0.04826546@dots{}
@end quotation

@node No-bust strategy
@section No-bust strategy
@anchor{#no-bust-strategy}
This directory shows how to play a ``no-bust'' strategy, i.e.@ not
hitting any hand higher or equal to hard twelve with Libre@ Blackjack.
The communication between the player and the back end is through
standard input and output. The player reads from its standard input
Libre@ Blackjack's commands and writes to its standard output the
playing commands. In order to do this a FIFO (a.k.a. named pipe) is
needed. So first, we create it (if it is not already created):

@verbatim
mkfifo fifo
@end verbatim

Then we execute @code{blackjack}, piping its output to the player (say
@code{no-bust.pl}) and reading the standard input from @code{fifo},
whilst at the same time we redirect the player's standard output to
@code{fifo}:

@verbatim
if test ! -e fifo; then
 mkfifo fifo
fi
blackjack -n1e5 < fifo | ./no-bust.pl > fifo
@end verbatim

As this time the player is coded in an interpreted langauge, it is far
smarter than the previous @code{yes}-based player. So the player can
handle bets and insurances, and there is not need to pass the options
@code{--flat_bet} nor @code{--no_insurance} (though they can be passed
anyway). Let us take a look at the Perl implementation:

@verbatim
#!/usr/bin/perl
# this is needed to avoid deadlock with the fifo
STDOUT->autoflush(1);

while ($command ne "bye") {
  # do not play more than a number of commands
  # if the argument -n was not passed to blackjack
  if ($i++ == 123456789) {
    print "quit\n";
    exit;
  }
  
  # read and process the commands
  chomp($command = <STDIN>);
  
  if ($command eq "bet?") {
    print "1\n";
  } elsif ($command eq "insurance?") {
    print "no\n";
  } elsif ($comm eq "play?") {
    print "count\n";
    chomp($count = <STDIN>); # the count
    chomp($play = <STDIN>);  # again the "play?" query
    if ($count < 12) {
      print "hit\n";
    } else {
      print "stand\n";
    }
  }
}
@end verbatim

The very same player may be implemented as a shell script:

@verbatim
#!/bin/sh

while read command
do
  if test "${command}" = 'bye'; then
    exit
  elif test "${command}" = 'bet?'; then
    echo 1  
  elif test "${command}" = 'insurance?'; then
    echo "no"
  elif test "`echo ${command} | cut -c-5`" = 'play?'; then
    echo "count"
    read count
    read play      # blackjack will ask again for 'play?'
    if test ${count} -lt 12; then
      echo "hit"
    else
      echo "stand"
    fi
  fi
done
@end verbatim

To check these two players give the same results, make them play against
Libre@ Blackjack with the same seed (say one) and send the YAML report
to two different files:

@verbatim
blackjack -n1e3 --rng_seed=1 --yaml_report=perl.yml \
    < fifo | ./no-bust.pl > fifo
blackjack -n1e3 --rng_seed=1 --yaml_report=shell.yml \
    < fifo | ./no-bust.sh > fifo
diff perl.yml shell.yml 

15,19c15,19
<   user:             0
<   system:           0.022603
<   wall:             0.034317
<   second_per_hand:  3.4e-05
<   hands_per_second: 2.9e+04
---
>   user:             0.06838
>   system:           0.13676
>   wall:             11.1446
>   second_per_hand:  1.1e-02
>   hands_per_second: 9.0e+01
@end verbatim

As expected, the reports are the same. They just differ in the speed
because the shell script is orders of magnitude slower than its
Perl-based counterpart.

@quotation
@strong{Exercise:} modify the players so they always insure aces and see
if it improves or degrades the result.
@end quotation

@node Mimic the dealer
@section Mimic the dealer
@anchor{#mimic-the-dealer}
This example implements a ``mimic-the-dealer strategy,'' i.e.@ hits if
the hand totals less than seventeen and stands on eighteen or more. The
player stands on hard seventeen but hits on soft seventeen.

This time, the configuration file @code{blackjack.conf} is used. If a
file with this name exists in the directory where @code{blackjack} is
executed, it is read and parsed. The options should be fairly self
descriptive. See the [configuration file] section of the manual for a
detailed explanation of the variables and values that can be entered. In
particular, we ask to play one hundred thousand hands at a six-deck game
where the dealer hits soft seventeens. If the random seed is set to a
fixed value so each execution will lead to the very same sequence of
cards.

Now, there are two options that tell Libre@ Blackjack how the player is
going to talk to the backend: @code{player2dealer} and
@code{dealer2player}. The first one sets the communication mechanism
from the player to the dealer (by default is @code{blackjack}'s standard
input), and the second one sets the mechanism from the dealer to the
player (by default @code{blackjack}'s standard output). In this case,
the configuration file reads:

@verbatim
hands = 1e5
decks = 6
hit_soft_17 = 1
# uncomment to obtain the same cards each time
# rng_seed = 1  

player2dealer = fifo mimic_p2d
dealer2player = fifo mimic_d2p
buffered_fifo = 1
@end verbatim

This means that two FIFOs (a.k.a. named pipes) are to be used for
communication, @code{player2dealer} from the player to the dealer and
@code{dealer2player} for the dealer to the player. If these FIFOs do not
exist, they are created by @code{blackjack} upon execution.

The player this time is implemented as an awk script, whose input should
be read from @code{dealer2player} and whose output should be written to
@code{player2dealer}. To run the game, execute @code{blackjack} in one
terminal making sure the current directory is where the
@code{blackjack.conf} file exists. It should print a message telling
that it is waiting for someone to be at the other side of the named
pipes:

@verbatim
$ blackjack
[...]
waiting for dealer2player buffered fifo 'dealer2player'...
@end verbatim

In another terminal run the player

@verbatim
$ ./mimic-the-dealer.awk < dealer2player > player2dealer
@end verbatim

Both dealer and player may be run in the same terminal putting the first
one on the background:

@verbatim
rm -f mimic_d2p mimic_p2d
mkfifo mimic_d2p mimic_p2d
blackjack &
gawk -f mimic-the-dealer.awk < mimic_d2p > mimic_p2d
@end verbatim

To understand the decisions taken by the player, we have to remember
that when Libre@ Blackjack receives the command @code{count} asking for
the current player's count, it returns a positive number for hard hands
and a negative number for soft hands. The instructions @code{fflush()}
are needed in order to avoid deadlocks on the named pipes:

@verbatim
#!/usr/bin/gawk -f
function abs(x){return ( x >= 0 ) ? x : -x } 

/bet\?/ {
  print "1";
  fflush();
}

/insurance\?/ {
  print "no";
  fflush();
}

/play\?/ {
  count = $2
  # mimic the dealer: hit until 17 (hit soft 17)
  if (abs(count) < 17 || count == -17) {   # soft hands are negative
    print "hit";
  } else {
    print "stand";
  }
  fflush();  
}

/bye/ {
  exit;
}
@end verbatim

@verbatim
---
rules:
  decks:                  6
  hands:                  100000
  hit_soft_17:            1
  double_after_split:     1
  blackjack_pays:         1.5
  rng_seed:               -1448949563
  number_of_burnt_cards:  0
  no_negative_bankroll:   0
  max_bet:                0
  penetration:            0.75
  penetration_sigma:      0.05
cpu:
  user:             0.631905
  system:           1.19576
  wall:             2.15273
  second_per_hand:  2.2e-05
  hands_per_second: 4.6e+04
player: 
  wins:               0.41044
  pushes:             0.09695
  losses:             0.49261
  dealer_blackjacks:  0.04658
  player_blackjacks:  0.04663
  dealer_busts:       0.18984
  player_busts:       0.27268
  doubled_hands:      0
  doubled_wins:       0
  insured_hands:      0
  insured_wins:       0
  number_of_hands:    100000
  number_of_shuffles: 2326
  total_money_waged:  100000
  worst_bankroll:     -5996.5
  final_bankroll:     -5994.5
  return:             -0.059945
  variance:            0.955017
  deviation:           0.97725
  error:               0.00309034
  result:             "(-6.0 Â± 0.6) %"
...
@end verbatim

@quotation
@strong{Exercise:} modify the player and the configuration file so both
the dealer and the player may stand on soft seventeen. Analyze the four
combinations (player h17 - dealer h17, player h17 - dealer s17, player
s17 - dealer h17, player s17 - dealer s17)
@end quotation

@node Derivation of the basic strategy
@section Derivation of the basic strategy
@anchor{#derivation-of-the-basic-strategy}

@menu
* Quick run::
* Full table with results::
* Detailed explanation::
* Implementation::
@end menu

@node Quick run
@subsection Quick run
@anchor{#quick-run}
Execute the @code{run.sh} script. It should take a minute or so:

@verbatim
$ ./run.sh
h20-2 (10 10) n=1000    s=0.634 (0.03)  d=-1.676 (0.03) h=-0.844 (0.02) stand
h20-3 (10 10) n=1000    s=0.66 (0.03)   d=-1.744 (0.03) h=-0.847 (0.02) stand
h20-4 (10 10) n=1000    s=0.65 (0.03)   d=-1.708 (0.03) h=-0.852 (0.02) stand
[...]
p2-T n=1000     y=-0.552 (0.05) n=-0.381 (0.03) no
p2-A n=1000     y=-0.565 (0.04) n=-0.543 (0.03) uncertain
p2-A n=10000    y=-0.6505 (0.01)        n=-0.5025 (0.008)       no
@end verbatim

A new text file called @code{bs.txt} with the strategy should be created
from scratch:

@verbatim
#    2  3  4  5  6  7  8  9  T  A
h20  s  s  s  s  s  s  s  s  s  s  
h19  s  s  s  s  s  s  s  s  s  s  
h18  s  s  s  s  s  s  s  s  s  s  
h17  s  s  s  s  s  s  s  s  s  s  
h16  s  s  s  s  s  h  h  h  s  h  
h15  s  s  s  s  s  h  h  h  h  h  
h14  s  s  s  s  s  h  h  h  h  h  
h13  s  s  s  s  s  h  h  h  h  h  
h12  h  h  s  s  s  h  h  h  h  h  
h11  d  d  d  d  d  d  d  d  d  h  
h10  d  d  d  d  d  d  d  d  h  d  
h9   h  d  d  d  d  h  h  h  h  h  
h8   h  h  h  h  h  h  h  h  h  h  
h7   h  h  h  h  h  h  h  h  h  h  
h6   h  h  h  h  h  h  h  h  h  h  
h5   h  h  h  h  h  h  h  h  h  h  
h4   h  h  h  h  h  h  h  h  h  h  
#    2  3  4  5  6  7  8  9  T  A
s20  s  s  s  s  s  s  s  s  s  s  
s19  s  s  s  s  d  s  s  s  s  s  
s18  d  d  d  d  d  s  s  h  h  h  
s17  h  d  d  d  d  h  h  h  h  h  
s16  h  h  d  d  d  h  h  h  h  h  
s15  h  h  d  d  d  h  h  h  h  h  
s14  h  h  h  d  d  h  h  h  h  h  
s13  h  h  h  h  d  h  h  h  h  h  
s12  h  h  h  h  d  h  h  h  h  h  
#    2  3  4  5  6  7  8  9  T  A
pA   y  y  y  y  y  y  y  y  y  y  
pT   n  n  n  n  n  n  n  n  n  n  
p9   y  y  y  y  y  n  y  y  n  n  
p8   y  y  y  y  y  y  y  y  y  y  
p7   y  y  y  y  y  y  n  n  n  n  
p6   y  y  y  y  y  n  n  n  n  n  
p5   n  n  n  n  n  n  n  n  n  n  
p4   n  n  n  y  y  n  n  n  n  n  
p3   y  y  y  y  y  y  n  n  n  n  
p2   y  y  y  y  y  y  n  n  n  n  
@end verbatim

@node Full table with results
@subsection Full table with results
@anchor{#full-table-with-results}
The script computes the expected value of each combination

@enumerate 
@item
Player's hand (hard, soft and pair)
@item
Dealer upcard
@item
Hit, soft and stand (for hards and softs) and splitting or not (for
pairs)
@end enumerate

The results are given as the expected value in percentage with the
uncertainty (one standard deviation) in the last significant digit.

@multitable {s12-A} {Number of hands} {-0.11506 (0.006)} {-0.21475 (0.003)} {-0.24466 (0.005)} 
@headitem 
Hand
 @tab Number of hands
 @tab Stand
 @tab Double
 @tab Hit
@item 
h20-2
 @tab 1000
 @tab 0.631 (0.03)
 @tab -0.844 (0.02)
 @tab -1.722 (0.03)
@item 
h20-3
 @tab 1000
 @tab 0.618 (0.03)
 @tab -0.866 (0.02)
 @tab -1.714 (0.03)
@item 
h20-4
 @tab 1000
 @tab 0.648 (0.03)
 @tab -0.899 (0.01)
 @tab -1.718 (0.03)
@item 
h20-5
 @tab 1000
 @tab 0.673 (0.03)
 @tab -0.874 (0.02)
 @tab -1.718 (0.03)
@item 
h20-6
 @tab 1000
 @tab 0.684 (0.03)
 @tab -0.855 (0.02)
 @tab -1.722 (0.03)
@item 
h20-7
 @tab 1000
 @tab 0.759 (0.03)
 @tab -0.844 (0.02)
 @tab -1.698 (0.03)
@item 
h20-8
 @tab 1000
 @tab 0.76 (0.03)
 @tab -0.846 (0.02)
 @tab -1.692 (0.03)
@item 
h20-9
 @tab 1000
 @tab 0.756 (0.03)
 @tab -0.83 (0.02)
 @tab -1.7 (0.03)
@item 
h20-T
 @tab 1000
 @tab 0.477 (0.03)
 @tab -0.853 (0.02)
 @tab -1.62 (0.03)
@item 
h20-A
 @tab 1000
 @tab 0.034 (0.03)
 @tab -0.888 (0.01)
 @tab -1.518 (0.03)
@item 
h19-2
 @tab 1000
 @tab 0.375 (0.04)
 @tab -0.741 (0.02)
 @tab -1.43 (0.04)
@item 
h19-3
 @tab 1000
 @tab 0.434 (0.04)
 @tab -0.704 (0.02)
 @tab -1.474 (0.04)
@item 
h19-4
 @tab 1000
 @tab 0.426 (0.04)
 @tab -0.756 (0.02)
 @tab -1.436 (0.04)
@item 
h19-5
 @tab 1000
 @tab 0.44 (0.04)
 @tab -0.725 (0.02)
 @tab -1.414 (0.04)
@item 
h19-6
 @tab 1000
 @tab 0.436 (0.04)
 @tab -0.734 (0.02)
 @tab -1.394 (0.04)
@item 
h19-7
 @tab 1000
 @tab 0.609 (0.04)
 @tab -0.734 (0.02)
 @tab -1.418 (0.04)
@item 
h19-8
 @tab 1000
 @tab 0.673 (0.05)
 @tab -0.727 (0.02)
 @tab -1.378 (0.05)
@item 
h19-9
 @tab 1000
 @tab 0.298 (0.04)
 @tab -0.705 (0.02)
 @tab -1.486 (0.04)
@item 
h19-T
 @tab 1000
 @tab -0.015 (0.04)
 @tab -0.758 (0.02)
 @tab -1.413 (0.04)
@item 
h19-A
 @tab 1000
 @tab -0.163 (0.04)
 @tab -0.823 (0.02)
 @tab -1.336 (0.04)
@item 
h18-2
 @tab 1000
 @tab 0.094 (0.05)
 @tab -0.652 (0.02)
 @tab -1.276 (0.05)
@item 
h18-3
 @tab 1000
 @tab 0.173 (0.05)
 @tab -0.624 (0.02)
 @tab -1.266 (0.05)
@item 
h18-4
 @tab 1000
 @tab 0.162 (0.05)
 @tab -0.631 (0.02)
 @tab -1.23 (0.05)
@item 
h18-5
 @tab 1000
 @tab 0.171 (0.05)
 @tab -0.598 (0.02)
 @tab -1.27 (0.05)
@item 
h18-6
 @tab 1000
 @tab 0.216 (0.05)
 @tab -0.627 (0.02)
 @tab -1.204 (0.05)
@item 
h18-7
 @tab 1000
 @tab 0.398 (0.05)
 @tab -0.568 (0.03)
 @tab -1.212 (0.05)
@item 
h18-8
 @tab 1000
 @tab 0.125 (0.05)
 @tab -0.628 (0.02)
 @tab -1.188 (0.05)
@item 
h18-9
 @tab 1000
 @tab -0.202 (0.05)
 @tab -0.583 (0.02)
 @tab -1.238 (0.05)
@item 
h18-T
 @tab 1000
 @tab -0.236 (0.05)
 @tab -0.726 (0.02)
 @tab -1.221 (0.05)
@item 
h18-A
 @tab 1000
 @tab -0.448 (0.04)
 @tab -0.753 (0.02)
 @tab -1.14 (0.04)
@item 
h17-2
 @tab 1000
 @tab -0.156 (0.05)
 @tab -0.57 (0.03)
 @tab -0.992 (0.05)
@item 
h17-3
 @tab 1000
 @tab -0.158 (0.05)
 @tab -0.557 (0.03)
 @tab -1.058 (0.05)
@item 
h17-4
 @tab 1000
 @tab -0.088 (0.05)
 @tab -0.548 (0.03)
 @tab -1.074 (0.05)
@item 
h17-5
 @tab 1000
 @tab -0.021 (0.05)
 @tab -0.531 (0.03)
 @tab -1.058 (0.05)
@item 
h17-6
 @tab 1000
 @tab 0.042 (0.05)
 @tab -0.533 (0.03)
 @tab -1.054 (0.05)
@item 
h17-7
 @tab 1000
 @tab -0.125 (0.05)
 @tab -0.494 (0.03)
 @tab -1.03 (0.05)
@item 
h17-8
 @tab 1000
 @tab -0.375 (0.05)
 @tab -0.574 (0.03)
 @tab -1.05 (0.05)
@item 
h17-9
 @tab 1000
 @tab -0.402 (0.05)
 @tab -0.525 (0.03)
 @tab -1.138 (0.05)
@item 
h17-T
 @tab 1000
 @tab -0.489 (0.05)
 @tab -0.623 (0.02)
 @tab -1.211 (0.05)
@item 
h17-A
 @tab 1000
 @tab -0.651 (0.04)
 @tab -0.721 (0.02)
 @tab -1.093 (0.04)
@item 
h16-2
 @tab 1000
 @tab -0.282 (0.05)
 @tab -0.438 (0.03)
 @tab -1.01 (0.05)
@item 
h16-3
 @tab 1000
 @tab -0.24 (0.05)
 @tab -0.508 (0.03)
 @tab -0.99 (0.05)
@item 
h16-4
 @tab 1000
 @tab -0.196 (0.05)
 @tab -0.469 (0.03)
 @tab -0.976 (0.05)
@item 
h16-5
 @tab 1000
 @tab -0.222 (0.06)
 @tab -0.423 (0.03)
 @tab -0.874 (0.06)
@item 
h16-6
 @tab 1000
 @tab -0.106 (0.05)
 @tab -0.473 (0.03)
 @tab -0.976 (0.05)
@item 
h16-7
 @tab 1000
 @tab -0.522 (0.06)
 @tab -0.412 (0.03)
 @tab -0.788 (0.06)
@item 
h16-8
 @tab 1000
 @tab -0.524 (0.05)
 @tab -0.433 (0.03)
 @tab -0.934 (0.05)
@item 
h16-9
 @tab 10000
 @tab -0.5468 (0.02)
 @tab -0.4897 (0.008)
 @tab -1.0266 (0.02)
@item 
h16-T
 @tab 1000000
 @tab -0.575524 (0)
 @tab -0.575795 (0)
 @tab -1.07298 (0)
@item 
h16-A
 @tab 10000
 @tab -0.7306 (0.01)
 @tab -0.6893 (0.007)
 @tab -1.045 (0.01)
@item 
h15-2
 @tab 1000
 @tab -0.304 (0.05)
 @tab -0.42 (0.03)
 @tab -0.96 (0.05)
@item 
h15-3
 @tab 1000
 @tab -0.186 (0.05)
 @tab -0.353 (0.03)
 @tab -0.88 (0.05)
@item 
h15-4
 @tab 1000
 @tab -0.176 (0.06)
 @tab -0.384 (0.03)
 @tab -0.7 (0.06)
@item 
h15-5
 @tab 1000
 @tab -0.152 (0.06)
 @tab -0.371 (0.03)
 @tab -0.682 (0.06)
@item 
h15-6
 @tab 1000
 @tab -0.166 (0.06)
 @tab -0.348 (0.03)
 @tab -0.73 (0.06)
@item 
h15-7
 @tab 1000
 @tab -0.524 (0.06)
 @tab -0.382 (0.03)
 @tab -0.776 (0.06)
@item 
h15-8
 @tab 10000
 @tab -0.5124 (0.02)
 @tab -0.4169 (0.009)
 @tab -0.8406 (0.02)
@item 
h15-9
 @tab 1000
 @tab -0.596 (0.05)
 @tab -0.425 (0.03)
 @tab -0.942 (0.05)
@item 
h15-T
 @tab 100000
 @tab -0.57872 (0.005)
 @tab -0.54447 (0.003)
 @tab -1.01351 (0.005)
@item 
h15-A
 @tab 1000
 @tab -0.724 (0.04)
 @tab -0.662 (0.02)
 @tab -1.028 (0.04)
@item 
h14-2
 @tab 10000
 @tab -0.3006 (0.02)
 @tab -0.3675 (0.009)
 @tab -0.7454 (0.02)
@item 
h14-3
 @tab 10000
 @tab -0.2476 (0.02)
 @tab -0.3417 (0.009)
 @tab -0.6788 (0.02)
@item 
h14-4
 @tab 1000
 @tab -0.222 (0.06)
 @tab -0.381 (0.03)
 @tab -0.688 (0.06)
@item 
h14-5
 @tab 1000
 @tab -0.128 (0.06)
 @tab -0.271 (0.03)
 @tab -0.734 (0.06)
@item 
h14-6
 @tab 10000
 @tab -0.1314 (0.02)
 @tab -0.3164 (0.009)
 @tab -0.619 (0.02)
@item 
h14-7
 @tab 1000
 @tab -0.49 (0.06)
 @tab -0.322 (0.03)
 @tab -0.62 (0.06)
@item 
h14-8
 @tab 1000
 @tab -0.54 (0.06)
 @tab -0.366 (0.03)
 @tab -0.828 (0.06)
@item 
h14-9
 @tab 1000
 @tab -0.538 (0.05)
 @tab -0.411 (0.03)
 @tab -0.924 (0.05)
@item 
h14-T
 @tab 10000
 @tab -0.5848 (0.02)
 @tab -0.5143 (0.008)
 @tab -0.9248 (0.02)
@item 
h14-A
 @tab 1000
 @tab -0.718 (0.04)
 @tab -0.576 (0.02)
 @tab -0.902 (0.04)
@item 
h13-2
 @tab 100000
 @tab -0.28324 (0.006)
 @tab -0.30386 (0.003)
 @tab -0.62712 (0.006)
@item 
h13-3
 @tab 10000
 @tab -0.2492 (0.02)
 @tab -0.2861 (0.009)
 @tab -0.5528 (0.02)
@item 
h13-4
 @tab 1000
 @tab -0.206 (0.06)
 @tab -0.318 (0.03)
 @tab -0.576 (0.06)
@item 
h13-5
 @tab 1000
 @tab -0.18 (0.06)
 @tab -0.278 (0.03)
 @tab -0.42 (0.06)
@item 
h13-6
 @tab 1000
 @tab -0.068 (0.06)
 @tab -0.219 (0.03)
 @tab -0.516 (0.06)
@item 
h13-7
 @tab 1000
 @tab -0.478 (0.06)
 @tab -0.223 (0.03)
 @tab -0.602 (0.06)
@item 
h13-8
 @tab 1000
 @tab -0.506 (0.06)
 @tab -0.334 (0.03)
 @tab -0.708 (0.06)
@item 
h13-9
 @tab 1000
 @tab -0.516 (0.06)
 @tab -0.394 (0.03)
 @tab -0.746 (0.06)
@item 
h13-T
 @tab 1000
 @tab -0.598 (0.05)
 @tab -0.5 (0.03)
 @tab -0.947 (0.05)
@item 
h13-A
 @tab 1000
 @tab -0.734 (0.04)
 @tab -0.625 (0.02)
 @tab -0.99 (0.04)
@item 
h12-2
 @tab 100000
 @tab -0.28482 (0.006)
 @tab -0.24941 (0.003)
 @tab -0.50748 (0.006)
@item 
h12-3
 @tab 100000
 @tab -0.24648 (0.006)
 @tab -0.23454 (0.003)
 @tab -0.4634 (0.006)
@item 
h12-4
 @tab 100000
 @tab -0.20318 (0.006)
 @tab -0.21475 (0.003)
 @tab -0.43554 (0.006)
@item 
h12-5
 @tab 10000
 @tab -0.1632 (0.02)
 @tab -0.1934 (0.01)
 @tab -0.4412 (0.02)
@item 
h12-6
 @tab 10000
 @tab -0.1184 (0.02)
 @tab -0.1702 (0.01)
 @tab -0.3416 (0.02)
@item 
h12-7
 @tab 1000
 @tab -0.462 (0.06)
 @tab -0.264 (0.03)
 @tab -0.538 (0.06)
@item 
h12-8
 @tab 1000
 @tab -0.526 (0.06)
 @tab -0.281 (0.03)
 @tab -0.552 (0.06)
@item 
h12-9
 @tab 1000
 @tab -0.536 (0.06)
 @tab -0.366 (0.03)
 @tab -0.706 (0.06)
@item 
h12-T
 @tab 1000
 @tab -0.556 (0.05)
 @tab -0.434 (0.03)
 @tab -0.745 (0.05)
@item 
h12-A
 @tab 1000
 @tab -0.728 (0.05)
 @tab -0.543 (0.03)
 @tab -0.841 (0.05)
@item 
h11-2
 @tab 1000
 @tab -0.316 (0.06)
 @tab 0.25 (0.03)
 @tab 0.476 (0.06)
@item 
h11-3
 @tab 1000
 @tab -0.204 (0.06)
 @tab 0.288 (0.03)
 @tab 0.566 (0.06)
@item 
h11-4
 @tab 1000
 @tab -0.224 (0.06)
 @tab 0.296 (0.03)
 @tab 0.636 (0.06)
@item 
h11-5
 @tab 1000
 @tab -0.192 (0.06)
 @tab 0.286 (0.03)
 @tab 0.62 (0.06)
@item 
h11-6
 @tab 1000
 @tab -0.14 (0.06)
 @tab 0.282 (0.03)
 @tab 0.626 (0.06)
@item 
h11-7
 @tab 1000
 @tab -0.516 (0.06)
 @tab 0.271 (0.03)
 @tab 0.46 (0.06)
@item 
h11-8
 @tab 1000
 @tab -0.494 (0.06)
 @tab 0.193 (0.03)
 @tab 0.342 (0.06)
@item 
h11-9
 @tab 10000
 @tab -0.5302 (0.02)
 @tab 0.184 (0.009)
 @tab 0.279 (0.02)
@item 
h11-T
 @tab 10000
 @tab -0.5806 (0.02)
 @tab 0.0312 (0.01)
 @tab 0.076 (0.02)
@item 
h11-A
 @tab 100000
 @tab -0.72378 (0.005)
 @tab -0.2353 (0.003)
 @tab -0.24466 (0.005)
@item 
h10-2
 @tab 1000
 @tab -0.318 (0.06)
 @tab 0.116 (0.03)
 @tab 0.386 (0.06)
@item 
h10-3
 @tab 1000
 @tab -0.226 (0.06)
 @tab 0.146 (0.03)
 @tab 0.466 (0.06)
@item 
h10-4
 @tab 1000
 @tab -0.212 (0.06)
 @tab 0.235 (0.03)
 @tab 0.582 (0.06)
@item 
h10-5
 @tab 1000
 @tab -0.184 (0.06)
 @tab 0.279 (0.03)
 @tab 0.45 (0.06)
@item 
h10-6
 @tab 1000
 @tab -0.118 (0.06)
 @tab 0.314 (0.03)
 @tab 0.592 (0.06)
@item 
h10-7
 @tab 1000
 @tab -0.46 (0.06)
 @tab 0.267 (0.03)
 @tab 0.514 (0.06)
@item 
h10-8
 @tab 10000
 @tab -0.517 (0.02)
 @tab 0.1957 (0.009)
 @tab 0.2802 (0.02)
@item 
h10-9
 @tab 1000
 @tab -0.546 (0.06)
 @tab 0.129 (0.03)
 @tab 0.22 (0.06)
@item 
h10-T
 @tab 10000
 @tab -0.5862 (0.02)
 @tab -0.0588 (0.009)
 @tab -0.1086 (0.02)
@item 
h10-A
 @tab 1000
 @tab -0.696 (0.05)
 @tab -0.29 (0.03)
 @tab -0.206 (0.05)
@item 
h9-2
 @tab 1000
 @tab -0.248 (0.06)
 @tab 0.088 (0.03)
 @tab -0.006 (0.06)
@item 
h9-3
 @tab 10000
 @tab -0.255 (0.02)
 @tab 0.0932 (0.01)
 @tab 0.1294 (0.02)
@item 
h9-4
 @tab 10000
 @tab -0.2024 (0.02)
 @tab 0.1175 (0.01)
 @tab 0.19 (0.02)
@item 
h9-5
 @tab 1000
 @tab -0.182 (0.06)
 @tab 0.168 (0.03)
 @tab 0.272 (0.06)
@item 
h9-6
 @tab 10000
 @tab -0.1058 (0.02)
 @tab 0.1937 (0.009)
 @tab 0.2904 (0.02)
@item 
h9-7
 @tab 10000
 @tab -0.4702 (0.02)
 @tab 0.1666 (0.009)
 @tab 0.0708 (0.02)
@item 
h9-8
 @tab 1000
 @tab -0.524 (0.06)
 @tab 0.093 (0.03)
 @tab -0.024 (0.06)
@item 
h9-9
 @tab 1000
 @tab -0.536 (0.06)
 @tab -0.067 (0.03)
 @tab -0.298 (0.06)
@item 
h9-T
 @tab 1000
 @tab -0.618 (0.06)
 @tab -0.191 (0.03)
 @tab -0.527 (0.06)
@item 
h9-A
 @tab 1000
 @tab -0.708 (0.05)
 @tab -0.383 (0.03)
 @tab -0.65 (0.05)
@item 
h8-2
 @tab 1000
 @tab -0.286 (0.06)
 @tab -0.037 (0.03)
 @tab -0.18 (0.06)
@item 
h8-3
 @tab 1000
 @tab -0.226 (0.06)
 @tab -0.092 (0.03)
 @tab -0.198 (0.06)
@item 
h8-4
 @tab 1000
 @tab -0.22 (0.06)
 @tab 0.084 (0.03)
 @tab -0.168 (0.06)
@item 
h8-5
 @tab 10000
 @tab -0.164 (0.02)
 @tab 0.0565 (0.01)
 @tab 0.0248 (0.02)
@item 
h8-6
 @tab 100000
 @tab -0.11954 (0.006)
 @tab 0.10471 (0.003)
 @tab 0.08198 (0.006)
@item 
h8-7
 @tab 1000
 @tab -0.54 (0.06)
 @tab 0.088 (0.03)
 @tab -0.212 (0.06)
@item 
h8-8
 @tab 1000
 @tab -0.516 (0.06)
 @tab 0 (0.03)
 @tab -0.458 (0.06)
@item 
h8-9
 @tab 1000
 @tab -0.548 (0.06)
 @tab -0.195 (0.03)
 @tab -0.668 (0.06)
@item 
h8-T
 @tab 1000
 @tab -0.608 (0.05)
 @tab -0.323 (0.03)
 @tab -0.774 (0.05)
@item 
h8-A
 @tab 1000
 @tab -0.75 (0.05)
 @tab -0.464 (0.03)
 @tab -0.884 (0.05)
@item 
h7-2
 @tab 1000
 @tab -0.326 (0.06)
 @tab -0.073 (0.03)
 @tab -0.414 (0.06)
@item 
h7-3
 @tab 1000
 @tab -0.21 (0.06)
 @tab -0.075 (0.03)
 @tab -0.348 (0.06)
@item 
h7-4
 @tab 1000
 @tab -0.21 (0.06)
 @tab -0.02 (0.03)
 @tab -0.36 (0.06)
@item 
h7-5
 @tab 1000
 @tab -0.132 (0.06)
 @tab 0.075 (0.03)
 @tab -0.13 (0.06)
@item 
h7-6
 @tab 1000
 @tab -0.122 (0.06)
 @tab 0.076 (0.03)
 @tab -0.13 (0.06)
@item 
h7-7
 @tab 1000
 @tab -0.452 (0.06)
 @tab -0.066 (0.03)
 @tab -0.492 (0.06)
@item 
h7-8
 @tab 1000
 @tab -0.522 (0.05)
 @tab -0.198 (0.03)
 @tab -0.892 (0.05)
@item 
h7-9
 @tab 1000
 @tab -0.562 (0.05)
 @tab -0.275 (0.03)
 @tab -0.994 (0.05)
@item 
h7-T
 @tab 1000
 @tab -0.57 (0.05)
 @tab -0.351 (0.03)
 @tab -0.923 (0.05)
@item 
h7-A
 @tab 1000
 @tab -0.716 (0.04)
 @tab -0.546 (0.03)
 @tab -1.077 (0.04)
@item 
h6-2
 @tab 1000
 @tab -0.254 (0.06)
 @tab -0.126 (0.03)
 @tab -0.472 (0.06)
@item 
h6-3
 @tab 10000
 @tab -0.244 (0.02)
 @tab -0.1126 (0.01)
 @tab -0.4712 (0.02)
@item 
h6-4
 @tab 1000
 @tab -0.192 (0.06)
 @tab -0.036 (0.03)
 @tab -0.396 (0.06)
@item 
h6-5
 @tab 1000
 @tab -0.216 (0.06)
 @tab -0.097 (0.03)
 @tab -0.322 (0.06)
@item 
h6-6
 @tab 1000
 @tab -0.12 (0.06)
 @tab -0.008 (0.03)
 @tab -0.178 (0.06)
@item 
h6-7
 @tab 1000
 @tab -0.488 (0.05)
 @tab -0.153 (0.03)
 @tab -0.942 (0.05)
@item 
h6-8
 @tab 1000
 @tab -0.536 (0.05)
 @tab -0.221 (0.03)
 @tab -0.998 (0.05)
@item 
h6-9
 @tab 1000
 @tab -0.536 (0.05)
 @tab -0.309 (0.03)
 @tab -1.058 (0.05)
@item 
h6-T
 @tab 1000
 @tab -0.58 (0.05)
 @tab -0.406 (0.03)
 @tab -1.127 (0.05)
@item 
h6-A
 @tab 1000
 @tab -0.706 (0.04)
 @tab -0.578 (0.02)
 @tab -1.111 (0.04)
@item 
h5-2
 @tab 1000
 @tab -0.284 (0.06)
 @tab -0.114 (0.03)
 @tab -0.576 (0.06)
@item 
h5-3
 @tab 1000
 @tab -0.22 (0.06)
 @tab -0.127 (0.03)
 @tab -0.44 (0.06)
@item 
h5-4
 @tab 1000
 @tab -0.232 (0.06)
 @tab -0.058 (0.03)
 @tab -0.504 (0.06)
@item 
h5-5
 @tab 1000
 @tab -0.174 (0.06)
 @tab -0.02 (0.03)
 @tab -0.224 (0.06)
@item 
h5-6
 @tab 1000
 @tab -0.134 (0.06)
 @tab -0.015 (0.03)
 @tab -0.248 (0.06)
@item 
h5-7
 @tab 1000
 @tab -0.454 (0.06)
 @tab -0.167 (0.03)
 @tab -0.964 (0.06)
@item 
h5-8
 @tab 1000
 @tab -0.536 (0.05)
 @tab -0.244 (0.03)
 @tab -1.088 (0.05)
@item 
h5-9
 @tab 1000
 @tab -0.556 (0.05)
 @tab -0.324 (0.03)
 @tab -1.08 (0.05)
@item 
h5-T
 @tab 1000
 @tab -0.526 (0.05)
 @tab -0.392 (0.03)
 @tab -1.112 (0.05)
@item 
h5-A
 @tab 1000
 @tab -0.744 (0.04)
 @tab -0.522 (0.03)
 @tab -1.1 (0.04)
@item 
h4-2
 @tab 1000
 @tab -0.286 (0.06)
 @tab -0.182 (0.03)
 @tab -0.512 (0.06)
@item 
h4-3
 @tab 1000
 @tab -0.252 (0.06)
 @tab -0.141 (0.03)
 @tab -0.496 (0.06)
@item 
h4-4
 @tab 1000
 @tab -0.206 (0.06)
 @tab -0.052 (0.03)
 @tab -0.348 (0.06)
@item 
h4-5
 @tab 1000
 @tab -0.156 (0.06)
 @tab -0.013 (0.03)
 @tab -0.296 (0.06)
@item 
h4-6
 @tab 1000
 @tab -0.104 (0.06)
 @tab 0.02 (0.03)
 @tab -0.184 (0.06)
@item 
h4-7
 @tab 1000
 @tab -0.478 (0.06)
 @tab -0.137 (0.03)
 @tab -0.94 (0.06)
@item 
h4-8
 @tab 1000
 @tab -0.526 (0.05)
 @tab -0.193 (0.03)
 @tab -1.108 (0.05)
@item 
h4-9
 @tab 1000
 @tab -0.528 (0.05)
 @tab -0.283 (0.03)
 @tab -1.084 (0.05)
@item 
h4-T
 @tab 1000
 @tab -0.612 (0.05)
 @tab -0.399 (0.03)
 @tab -1.072 (0.05)
@item 
h4-A
 @tab 1000
 @tab -0.74 (0.04)
 @tab -0.557 (0.03)
 @tab -1.081 (0.04)
@item 
s20-2
 @tab 1000
 @tab 0.646 (0.06)
 @tab 0.217 (0.03)
 @tab 0.312 (0.06)
@item 
s20-3
 @tab 1000
 @tab 0.677 (0.06)
 @tab 0.181 (0.03)
 @tab 0.338 (0.06)
@item 
s20-4
 @tab 1000
 @tab 0.637 (0.06)
 @tab 0.213 (0.03)
 @tab 0.436 (0.06)
@item 
s20-5
 @tab 10000
 @tab 0.6604 (0.02)
 @tab 0.2455 (0.009)
 @tab 0.5394 (0.02)
@item 
s20-6
 @tab 1000
 @tab 0.694 (0.06)
 @tab 0.281 (0.03)
 @tab 0.524 (0.06)
@item 
s20-7
 @tab 1000
 @tab 0.753 (0.06)
 @tab 0.304 (0.03)
 @tab 0.488 (0.06)
@item 
s20-8
 @tab 1000
 @tab 0.777 (0.06)
 @tab 0.229 (0.03)
 @tab 0.274 (0.06)
@item 
s20-9
 @tab 1000
 @tab 0.733 (0.06)
 @tab 0.138 (0.03)
 @tab 0.098 (0.06)
@item 
s20-T
 @tab 1000
 @tab 0.438 (0.06)
 @tab -0.057 (0.03)
 @tab -0.038 (0.06)
@item 
s20-A
 @tab 1000
 @tab 0.067 (0.05)
 @tab -0.272 (0.03)
 @tab -0.341 (0.05)
@item 
s19-2
 @tab 1000
 @tab 0.389 (0.06)
 @tab 0.092 (0.03)
 @tab 0.256 (0.06)
@item 
s19-3
 @tab 10000
 @tab 0.39 (0.02)
 @tab 0.1464 (0.009)
 @tab 0.3168 (0.02)
@item 
s19-4
 @tab 10000
 @tab 0.4082 (0.02)
 @tab 0.1816 (0.009)
 @tab 0.3286 (0.02)
@item 
s19-5
 @tab 100000
 @tab 0.43517 (0.006)
 @tab 0.20004 (0.003)
 @tab 0.398 (0.006)
@item 
s19-6
 @tab 1000000
 @tab 0.453457 (0)
 @tab 0.231529 (0)
 @tab 0.460572 (0)
@item 
s19-7
 @tab 1000
 @tab 0.633 (0.06)
 @tab 0.231 (0.03)
 @tab 0.372 (0.06)
@item 
s19-8
 @tab 1000
 @tab 0.59 (0.06)
 @tab 0.122 (0.03)
 @tab 0.192 (0.06)
@item 
s19-9
 @tab 1000
 @tab 0.301 (0.06)
 @tab -0.013 (0.03)
 @tab -0.122 (0.06)
@item 
s19-T
 @tab 1000
 @tab -0.032 (0.06)
 @tab -0.175 (0.03)
 @tab -0.395 (0.06)
@item 
s19-A
 @tab 1000
 @tab -0.133 (0.05)
 @tab -0.331 (0.03)
 @tab -0.48 (0.05)
@item 
s18-2
 @tab 1000000
 @tab 0.109892 (0)
 @tab 0.058827 (0)
 @tab 0.117848 (0)
@item 
s18-3
 @tab 10000
 @tab 0.1328 (0.02)
 @tab 0.1039 (0.01)
 @tab 0.2114 (0.02)
@item 
s18-4
 @tab 10000
 @tab 0.1586 (0.02)
 @tab 0.1282 (0.01)
 @tab 0.2484 (0.02)
@item 
s18-5
 @tab 1000
 @tab 0.203 (0.06)
 @tab 0.135 (0.03)
 @tab 0.344 (0.06)
@item 
s18-6
 @tab 10000
 @tab 0.2239 (0.02)
 @tab 0.1889 (0.009)
 @tab 0.3842 (0.02)
@item 
s18-7
 @tab 10000
 @tab 0.3993 (0.02)
 @tab 0.169 (0.009)
 @tab 0.1994 (0.02)
@item 
s18-8
 @tab 10000
 @tab 0.1101 (0.02)
 @tab 0.0447 (0.009)
 @tab -0.0398 (0.02)
@item 
s18-9
 @tab 10000
 @tab -0.1749 (0.02)
 @tab -0.0937 (0.009)
 @tab -0.2754 (0.02)
@item 
s18-T
 @tab 10000
 @tab -0.2431 (0.02)
 @tab -0.2043 (0.009)
 @tab -0.388 (0.02)
@item 
s18-A
 @tab 1000
 @tab -0.494 (0.05)
 @tab -0.405 (0.03)
 @tab -0.662 (0.05)
@item 
s17-2
 @tab 1000000
 @tab -0.155882 (0)
 @tab -0.006551 (0)
 @tab -0.012158 (0)
@item 
s17-3
 @tab 1000
 @tab -0.113 (0.06)
 @tab -0.008 (0.03)
 @tab 0.096 (0.06)
@item 
s17-4
 @tab 1000
 @tab -0.06 (0.06)
 @tab 0.018 (0.03)
 @tab 0.112 (0.06)
@item 
s17-5
 @tab 1000
 @tab -0.003 (0.06)
 @tab 0.071 (0.03)
 @tab 0.314 (0.06)
@item 
s17-6
 @tab 1000
 @tab -0.015 (0.06)
 @tab 0.11 (0.03)
 @tab 0.252 (0.06)
@item 
s17-7
 @tab 1000
 @tab -0.086 (0.06)
 @tab 0.059 (0.03)
 @tab -0.042 (0.06)
@item 
s17-8
 @tab 1000
 @tab -0.349 (0.06)
 @tab -0.064 (0.03)
 @tab -0.234 (0.06)
@item 
s17-9
 @tab 1000
 @tab -0.408 (0.06)
 @tab -0.211 (0.03)
 @tab -0.332 (0.06)
@item 
s17-T
 @tab 1000
 @tab -0.455 (0.06)
 @tab -0.209 (0.03)
 @tab -0.507 (0.06)
@item 
s17-A
 @tab 1000
 @tab -0.649 (0.05)
 @tab -0.479 (0.03)
 @tab -0.649 (0.05)
@item 
s16-2
 @tab 1000
 @tab -0.258 (0.06)
 @tab 0.002 (0.03)
 @tab -0.158 (0.06)
@item 
s16-3
 @tab 10000
 @tab -0.2604 (0.02)
 @tab 0.0147 (0.01)
 @tab -0.0448 (0.02)
@item 
s16-4
 @tab 1000
 @tab -0.162 (0.06)
 @tab -0.037 (0.03)
 @tab 0.07 (0.06)
@item 
s16-5
 @tab 10000
 @tab -0.1576 (0.02)
 @tab 0.063 (0.01)
 @tab 0.133 (0.02)
@item 
s16-6
 @tab 10000
 @tab -0.1218 (0.02)
 @tab 0.0883 (0.01)
 @tab 0.183 (0.02)
@item 
s16-7
 @tab 1000
 @tab -0.484 (0.06)
 @tab 0.027 (0.03)
 @tab -0.194 (0.06)
@item 
s16-8
 @tab 1000
 @tab -0.556 (0.06)
 @tab -0.06 (0.03)
 @tab -0.346 (0.06)
@item 
s16-9
 @tab 1000
 @tab -0.548 (0.06)
 @tab -0.105 (0.03)
 @tab -0.482 (0.06)
@item 
s16-T
 @tab 1000
 @tab -0.562 (0.06)
 @tab -0.271 (0.03)
 @tab -0.474 (0.06)
@item 
s16-A
 @tab 1000
 @tab -0.724 (0.05)
 @tab -0.471 (0.03)
 @tab -0.679 (0.05)
@item 
s15-2
 @tab 10000
 @tab -0.2686 (0.02)
 @tab -0.0012 (0.01)
 @tab -0.0432 (0.02)
@item 
s15-3
 @tab 100000
 @tab -0.24634 (0.006)
 @tab 0.02229 (0.003)
 @tab -0.0134 (0.006)
@item 
s15-4
 @tab 10000
 @tab -0.212 (0.02)
 @tab 0.0491 (0.01)
 @tab 0.0798 (0.02)
@item 
s15-5
 @tab 10000
 @tab -0.1584 (0.02)
 @tab 0.0804 (0.01)
 @tab 0.1388 (0.02)
@item 
s15-6
 @tab 1000
 @tab -0.092 (0.06)
 @tab 0.109 (0.03)
 @tab 0.23 (0.06)
@item 
s15-7
 @tab 10000
 @tab -0.4756 (0.02)
 @tab 0.0379 (0.01)
 @tab -0.1748 (0.02)
@item 
s15-8
 @tab 1000
 @tab -0.542 (0.06)
 @tab -0.039 (0.03)
 @tab -0.34 (0.06)
@item 
s15-9
 @tab 1000
 @tab -0.554 (0.06)
 @tab -0.086 (0.03)
 @tab -0.398 (0.06)
@item 
s15-T
 @tab 1000
 @tab -0.582 (0.06)
 @tab -0.237 (0.03)
 @tab -0.63 (0.06)
@item 
s15-A
 @tab 1000
 @tab -0.71 (0.05)
 @tab -0.448 (0.03)
 @tab -0.664 (0.05)
@item 
s14-2
 @tab 1000
 @tab -0.262 (0.06)
 @tab 0.03 (0.03)
 @tab -0.134 (0.06)
@item 
s14-3
 @tab 10000
 @tab -0.2244 (0.02)
 @tab 0.0605 (0.01)
 @tab 0.0012 (0.02)
@item 
s14-4
 @tab 100000
 @tab -0.20532 (0.006)
 @tab 0.07772 (0.003)
 @tab 0.0549 (0.006)
@item 
s14-5
 @tab 10000
 @tab -0.1508 (0.02)
 @tab 0.0975 (0.01)
 @tab 0.1382 (0.02)
@item 
s14-6
 @tab 1000
 @tab -0.14 (0.06)
 @tab 0.121 (0.03)
 @tab 0.232 (0.06)
@item 
s14-7
 @tab 1000
 @tab -0.49 (0.06)
 @tab 0.09 (0.03)
 @tab -0.284 (0.06)
@item 
s14-8
 @tab 1000
 @tab -0.494 (0.06)
 @tab -0.031 (0.03)
 @tab -0.36 (0.06)
@item 
s14-9
 @tab 1000
 @tab -0.56 (0.06)
 @tab -0.096 (0.03)
 @tab -0.386 (0.06)
@item 
s14-T
 @tab 1000
 @tab -0.556 (0.06)
 @tab -0.192 (0.03)
 @tab -0.622 (0.06)
@item 
s14-A
 @tab 1000
 @tab -0.708 (0.05)
 @tab -0.404 (0.03)
 @tab -0.654 (0.05)
@item 
s13-2
 @tab 1000
 @tab -0.26 (0.06)
 @tab 0.082 (0.03)
 @tab -0.19 (0.06)
@item 
s13-3
 @tab 10000
 @tab -0.248 (0.02)
 @tab 0.0618 (0.01)
 @tab -0.0196 (0.02)
@item 
s13-4
 @tab 10000
 @tab -0.2056 (0.02)
 @tab 0.0949 (0.01)
 @tab 0.0602 (0.02)
@item 
s13-5
 @tab 1000000
 @tab -0.163838 (0)
 @tab 0.130573 (0)
 @tab 0.127766 (0)
@item 
s13-6
 @tab 100000
 @tab -0.11506 (0.006)
 @tab 0.13519 (0.003)
 @tab 0.18672 (0.006)
@item 
s13-7
 @tab 1000
 @tab -0.432 (0.06)
 @tab 0.124 (0.03)
 @tab -0.23 (0.06)
@item 
s13-8
 @tab 1000
 @tab -0.494 (0.06)
 @tab 0.034 (0.03)
 @tab -0.296 (0.06)
@item 
s13-9
 @tab 1000
 @tab -0.554 (0.06)
 @tab -0.01 (0.03)
 @tab -0.472 (0.06)
@item 
s13-T
 @tab 1000
 @tab -0.606 (0.06)
 @tab -0.178 (0.03)
 @tab -0.606 (0.06)
@item 
s13-A
 @tab 1000
 @tab -0.73 (0.05)
 @tab -0.335 (0.03)
 @tab -0.702 (0.05)
@item 
s12-2
 @tab 10000
 @tab -0.2868 (0.02)
 @tab 0.0886 (0.01)
 @tab -0.0724 (0.02)
@item 
s12-3
 @tab 1000
 @tab -0.182 (0.06)
 @tab 0.121 (0.03)
 @tab -0.02 (0.06)
@item 
s12-4
 @tab 1000
 @tab -0.24 (0.06)
 @tab 0.207 (0.03)
 @tab 0.042 (0.06)
@item 
s12-5
 @tab 10000
 @tab -0.1792 (0.02)
 @tab 0.156 (0.01)
 @tab 0.1094 (0.02)
@item 
s12-6
 @tab 10000
 @tab -0.1206 (0.02)
 @tab 0.1582 (0.01)
 @tab 0.2116 (0.02)
@item 
s12-7
 @tab 1000
 @tab -0.484 (0.06)
 @tab 0.106 (0.03)
 @tab -0.212 (0.06)
@item 
s12-8
 @tab 1000
 @tab -0.52 (0.06)
 @tab 0.081 (0.03)
 @tab -0.32 (0.06)
@item 
s12-9
 @tab 1000
 @tab -0.554 (0.06)
 @tab -0.035 (0.03)
 @tab -0.416 (0.06)
@item 
s12-T
 @tab 1000
 @tab -0.604 (0.06)
 @tab -0.215 (0.03)
 @tab -0.512 (0.06)
@item 
s12-A
 @tab 1000
 @tab -0.656 (0.05)
 @tab -0.363 (0.03)
 @tab -0.747 (0.05)
@end multitable

@multitable {p2-A} {Number of hands} {-0.08631 (0.006)} {-0.11174 (0.003)} 
@headitem 
Hand
 @tab Number of hands
 @tab Yes
 @tab No
@item 
pA-2
 @tab 1000
 @tab 0.441 (0.05)
 @tab 0.061 (0.03)
@item 
pA-3
 @tab 1000
 @tab 0.455 (0.05)
 @tab 0.127 (0.03)
@item 
pA-4
 @tab 1000
 @tab 0.613 (0.05)
 @tab 0.113 (0.03)
@item 
pA-5
 @tab 1000
 @tab 0.597 (0.05)
 @tab 0.143 (0.03)
@item 
pA-6
 @tab 1000
 @tab 0.755 (0.05)
 @tab 0.076 (0.06)
@item 
pA-7
 @tab 1000
 @tab 0.465 (0.05)
 @tab 0.205 (0.03)
@item 
pA-8
 @tab 1000
 @tab 0.4 (0.05)
 @tab 0.115 (0.03)
@item 
pA-9
 @tab 1000
 @tab 0.196 (0.05)
 @tab 0.011 (0.03)
@item 
pA-T
 @tab 1000
 @tab -0.025 (0.05)
 @tab -0.19 (0.03)
@item 
pA-A
 @tab 1000
 @tab -0.268 (0.04)
 @tab -0.357 (0.03)
@item 
pT-2
 @tab 1000
 @tab 0.52 (0.05)
 @tab 0.614 (0.02)
@item 
pT-3
 @tab 1000
 @tab 0.423 (0.05)
 @tab 0.673 (0.02)
@item 
pT-4
 @tab 1000
 @tab 0.553 (0.05)
 @tab 0.658 (0.02)
@item 
pT-5
 @tab 1000
 @tab 0.486 (0.05)
 @tab 0.703 (0.02)
@item 
pT-6
 @tab 1000
 @tab 0.591 (0.05)
 @tab 0.663 (0.02)
@item 
pT-7
 @tab 1000
 @tab 0.482 (0.05)
 @tab 0.771 (0.02)
@item 
pT-8
 @tab 1000
 @tab 0.378 (0.05)
 @tab 0.814 (0.02)
@item 
pT-9
 @tab 1000
 @tab 0.246 (0.04)
 @tab 0.754 (0.02)
@item 
pT-T
 @tab 1000
 @tab 0.035 (0.05)
 @tab 0.432 (0.02)
@item 
pT-A
 @tab 1000
 @tab -0.241 (0.04)
 @tab 0.09 (0.03)
@item 
p9-2
 @tab 10000
 @tab 0.173 (0.02)
 @tab 0.1071 (0.009)
@item 
p9-3
 @tab 1000
 @tab 0.291 (0.06)
 @tab 0.132 (0.03)
@item 
p9-4
 @tab 10000
 @tab 0.2773 (0.02)
 @tab 0.1663 (0.009)
@item 
p9-5
 @tab 1000
 @tab 0.422 (0.06)
 @tab 0.157 (0.03)
@item 
p9-6
 @tab 1000
 @tab 0.362 (0.06)
 @tab 0.206 (0.03)
@item 
p9-7
 @tab 100000
 @tab 0.37708 (0.005)
 @tab 0.39894 (0.003)
@item 
p9-8
 @tab 1000
 @tab 0.233 (0.05)
 @tab 0.073 (0.02)
@item 
p9-9
 @tab 10000
 @tab -0.0951 (0.02)
 @tab -0.165 (0.009)
@item 
p9-T
 @tab 1000
 @tab -0.433 (0.05)
 @tab -0.264 (0.03)
@item 
p9-A
 @tab 100000
 @tab -0.47946 (0.004)
 @tab -0.46333 (0.003)
@item 
p8-2
 @tab 1000
 @tab -0.028 (0.07)
 @tab -0.222 (0.03)
@item 
p8-3
 @tab 1000
 @tab 0.097 (0.07)
 @tab -0.28 (0.03)
@item 
p8-4
 @tab 1000
 @tab 0.193 (0.07)
 @tab -0.204 (0.03)
@item 
p8-5
 @tab 1000
 @tab 0.193 (0.07)
 @tab -0.142 (0.03)
@item 
p8-6
 @tab 1000
 @tab 0.26 (0.07)
 @tab -0.118 (0.03)
@item 
p8-7
 @tab 1000
 @tab 0.265 (0.06)
 @tab -0.41 (0.03)
@item 
p8-8
 @tab 1000
 @tab -0.059 (0.06)
 @tab -0.465 (0.03)
@item 
p8-9
 @tab 10000
 @tab -0.3916 (0.02)
 @tab -0.5137 (0.008)
@item 
p8-T
 @tab 1000
 @tab -0.508 (0.05)
 @tab -0.602 (0.03)
@item 
p8-A
 @tab 1000000
 @tab -0.681325 (0)
 @tab -0.684029 (0)
@item 
p7-2
 @tab 1000
 @tab -0.11 (0.07)
 @tab -0.344 (0.03)
@item 
p7-3
 @tab 1000
 @tab -0.111 (0.08)
 @tab -0.248 (0.03)
@item 
p7-4
 @tab 1000
 @tab -0.002 (0.08)
 @tab -0.198 (0.03)
@item 
p7-5
 @tab 1000
 @tab 0.132 (0.08)
 @tab -0.23 (0.03)
@item 
p7-6
 @tab 1000
 @tab 0.05 (0.08)
 @tab -0.172 (0.03)
@item 
p7-7
 @tab 1000
 @tab -0.167 (0.06)
 @tab -0.331 (0.03)
@item 
p7-8
 @tab 1000000
 @tab -0.39019 (0)
 @tab -0.371056 (0)
@item 
p7-9
 @tab 1000
 @tab -0.583 (0.06)
 @tab -0.434 (0.03)
@item 
p7-T
 @tab 1000
 @tab -0.729 (0.05)
 @tab -0.49 (0.03)
@item 
p7-A
 @tab 1000
 @tab -0.778 (0.04)
 @tab -0.667 (0.02)
@item 
p6-2
 @tab 100000
 @tab -0.21344 (0.007)
 @tab -0.25389 (0.003)
@item 
p6-3
 @tab 10000
 @tab -0.118 (0.02)
 @tab -0.2393 (0.009)
@item 
p6-4
 @tab 1000
 @tab -0.09 (0.08)
 @tab -0.25 (0.03)
@item 
p6-5
 @tab 1000
 @tab -0.023 (0.08)
 @tab -0.16 (0.03)
@item 
p6-6
 @tab 1000
 @tab 0.169 (0.08)
 @tab -0.106 (0.03)
@item 
p6-7
 @tab 10000
 @tab -0.2601 (0.02)
 @tab -0.2155 (0.009)
@item 
p6-8
 @tab 1000
 @tab -0.346 (0.05)
 @tab -0.25 (0.03)
@item 
p6-9
 @tab 1000
 @tab -0.592 (0.05)
 @tab -0.314 (0.03)
@item 
p6-T
 @tab 1000
 @tab -0.588 (0.05)
 @tab -0.419 (0.03)
@item 
p6-A
 @tab 1000
 @tab -0.799 (0.04)
 @tab -0.539 (0.03)
@item 
p5-2
 @tab 1000
 @tab -0.081 (0.07)
 @tab 0.406 (0.06)
@item 
p5-3
 @tab 1000
 @tab -0.192 (0.07)
 @tab 0.384 (0.06)
@item 
p5-4
 @tab 1000
 @tab -0.072 (0.08)
 @tab 0.45 (0.06)
@item 
p5-5
 @tab 1000
 @tab -0.018 (0.08)
 @tab 0.548 (0.06)
@item 
p5-6
 @tab 1000
 @tab 0.103 (0.08)
 @tab 0.586 (0.06)
@item 
p5-7
 @tab 1000
 @tab -0.188 (0.05)
 @tab 0.516 (0.06)
@item 
p5-8
 @tab 1000
 @tab -0.229 (0.06)
 @tab 0.332 (0.06)
@item 
p5-9
 @tab 1000
 @tab -0.595 (0.05)
 @tab 0.1 (0.06)
@item 
p5-T
 @tab 1000
 @tab -0.703 (0.05)
 @tab -0.058 (0.03)
@item 
p5-A
 @tab 1000
 @tab -0.792 (0.04)
 @tab -0.37 (0.05)
@item 
p4-2
 @tab 1000
 @tab -0.196 (0.06)
 @tab -0.024 (0.03)
@item 
p4-3
 @tab 1000
 @tab -0.141 (0.07)
 @tab 0.008 (0.03)
@item 
p4-4
 @tab 10000
 @tab -0.0201 (0.02)
 @tab 0.0318 (0.01)
@item 
p4-5
 @tab 1000
 @tab 0.227 (0.08)
 @tab 0.059 (0.03)
@item 
p4-6
 @tab 10000
 @tab 0.1502 (0.02)
 @tab 0.0797 (0.01)
@item 
p4-7
 @tab 1000
 @tab -0.175 (0.06)
 @tab 0.104 (0.03)
@item 
p4-8
 @tab 1000
 @tab -0.3 (0.06)
 @tab -0.026 (0.03)
@item 
p4-9
 @tab 1000
 @tab -0.584 (0.05)
 @tab -0.254 (0.03)
@item 
p4-T
 @tab 1000
 @tab -0.528 (0.05)
 @tab -0.283 (0.03)
@item 
p4-A
 @tab 1000
 @tab -0.761 (0.04)
 @tab -0.511 (0.03)
@item 
p3-2
 @tab 10000
 @tab -0.1154 (0.02)
 @tab -0.1628 (0.01)
@item 
p3-3
 @tab 1000
 @tab 0.009 (0.07)
 @tab -0.156 (0.03)
@item 
p3-4
 @tab 10000
 @tab 0.0318 (0.02)
 @tab -0.0634 (0.01)
@item 
p3-5
 @tab 10000
 @tab 0.0928 (0.02)
 @tab -0.0301 (0.01)
@item 
p3-6
 @tab 1000
 @tab 0.208 (0.08)
 @tab -0.009 (0.03)
@item 
p3-7
 @tab 10000
 @tab -0.0545 (0.02)
 @tab -0.1646 (0.009)
@item 
p3-8
 @tab 10000
 @tab -0.2405 (0.02)
 @tab -0.2107 (0.009)
@item 
p3-9
 @tab 1000
 @tab -0.418 (0.06)
 @tab -0.239 (0.03)
@item 
p3-T
 @tab 1000
 @tab -0.556 (0.05)
 @tab -0.412 (0.03)
@item 
p3-A
 @tab 1000
 @tab -0.718 (0.04)
 @tab -0.489 (0.03)
@item 
p2-2
 @tab 100000
 @tab -0.08631 (0.006)
 @tab -0.11174 (0.003)
@item 
p2-3
 @tab 10000
 @tab -0.0276 (0.02)
 @tab -0.093 (0.01)
@item 
p2-4
 @tab 10000
 @tab 0.0193 (0.02)
 @tab -0.0345 (0.01)
@item 
p2-5
 @tab 10000
 @tab 0.102 (0.02)
 @tab -0.0088 (0.01)
@item 
p2-6
 @tab 1000
 @tab 0.209 (0.08)
 @tab -0.019 (0.03)
@item 
p2-7
 @tab 10000
 @tab 0.0157 (0.02)
 @tab -0.0907 (0.01)
@item 
p2-8
 @tab 1000000
 @tab -0.17563 (0)
 @tab -0.159877 (0)
@item 
p2-9
 @tab 10000
 @tab -0.3596 (0.02)
 @tab -0.2423 (0.009)
@item 
p2-T
 @tab 1000
 @tab -0.517 (0.05)
 @tab -0.314 (0.03)
@item 
p2-A
 @tab 1000
 @tab -0.602 (0.04)
 @tab -0.485 (0.03)
@end multitable

@node Detailed explanation
@subsection Detailed explanation
@anchor{#detailed-explanation}
We want to derive the basic strategy from scratch, i.e.@ without
assuming anything. What we are going to do is to play a large (more on
what @emph{large} means below) number of hands by fixing our first two
cards and the dealer upcard and sequentially standing, doubling or
hitting the first card. Then we will compare the results for the three
cases and select as the proper strategy the better one.

Standing and doubling are easy plays, because after we stand or double
the dealer plays accordingly to the rules. She hits until seventeen
(either soft or hard). But if we hit on our hand, we might need to make
another decision wether to stand or hit again. As we do not want to
assume anything, we have to play in such an order that if we do need to
make another decision, we already know which is the better one.

@menu
* Hard hands::
* Soft hands::
* Pairs::
* Number of hands::
@end menu

@node Hard hands
@subsubsection Hard hands
@anchor{#hard-hands}
So we start by arranging the shoe so that the user gets hard twenty
(i.e.@ two faces) and the dealer gets succesively upcards of two to ace.
So we play each combination of dealer upcard (ten) three times each
playing either

@enumerate 
@item
always standing
@item
always doubling
@item
always hitting
@end enumerate

In general the first two plays are easy, because the game stops either
after standing or after receiving only one card. The last one might lead
to further hitting, but since we are starting with a hard twenty, that
would either give the player twenty one or a bust. In any case, the game
also ends. So we play a certain number of hands (say one thousand hands)
each of these three plays for each of the ten upcard faces and record
the outcome. The correct play for hard twenty against each of the ten
upcards is the play that gave the better result, which is of course
standing.

Next, we do the same for a hard nineteen. In this case, the hitting play
might not end after one card is drawn. But if that is the case,
i.e.@ receiving an ace for a total of hard twenty, we already know what
the best play is from the previous step so we play accordingly and we
stand. Repeating this procedure down to hard four we can build the basic
strategy table for any hard total against any dealer upcard.

@node Soft hands
@subsubsection Soft hands
@anchor{#soft-hands}
We can now switch to analyze soft hands. Starting from soft twenty
(i.e.@ an ace and a nine) we do the same we did for the hard case. The
only difference is that wehn hitting, we might end either in another
soft hand which we would already analyzed because we start from twenty
and go down, or in a hard hand, which we also already analyzed se we can
play accordingly.

@node Pairs
@subsubsection Pairs
@anchor{#pairs}
When dealing with pairs, we have to decide wether to split or not. When
we do not split, we end up in one of the already-analyzed cases: either
a soft twelve of any even hard hand. When we split, we might end in a
hard or soft hand (already analyzed) or in a new pair. But since the new
pair can be only the same pair we are analyzing, we have to treat it
like we treated the first pair: either to split it or not, so we know
how to deal with it.

@node Number of hands
@subsubsection Number of hands
@anchor{#number-of-hands}
The output is the expected value@ @math{e} of the bankroll, which is a
random variable with an associated uncertainty@ @math{\Delta e} (i.e.@ a
certain numbers of standard deviations). For example, if we received
only blackjacks, the expected value would be 1.5 (provided blackjacks
pay 3 to 2). If we busted all of our hands without doubling or
splitting, the expected value would be -1. In order to say that the best
strategy is, let's say stand and not hitting or doubling, we have to
make sure that @math{e_h-\Delta e_h > e_s+\Delta e_s} and
@math{e_h-\Delta e_h > e_d+\Delta e_d}. If there is no play that can
give a better expected value than the other two taking into account the
uncertainties, then we have to play more hands in order to reduce the
random uncertainty.

@node Implementation
@subsection Implementation
@anchor{#implementation}
The steps above can be written in a
@uref{https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29,Bash} script
that

@itemize
@item
loops over hands and upcards,
@item
creates a strategy file for each possible play hit, double or stand (or
split or not),
@item
runs @uref{https://www.seamplex.com/blackjack,Libre@ Blackjack},
@item
checks the results and picks the best play,
@item
updates the strategy file
@end itemize

@verbatim
#!/bin/bash

for i in grep cut bc awk; do
 if [ -z "`which $i`" ]; then
  echo "error: $i not installed"
  exit 1
 fi
done

debug=0

declare -A strategy
declare -A ev

declare -A min
min["hard"]=4   # from 20 to 4 in hards
min["soft"]=12  # from 20 to 12 in softs

rm -f hard.html soft.html pair.html

# start with standing
cp hard-stand.txt hard.txt
cp soft-stand.txt soft.txt

cat << EOF > table.md
| Hand | \$n\$ | Stand | Double | Hit |
| ---- | ----- | ----- | ------ | --- |
EOF


for type in hard soft; do
 for hand in `seq 20 -1 ${min[${type}]}`; do
 
  # choose two random cards that make up the player's assumed total
  if [ ${type} = "hard" ]; then
   t="h"
   card1=11
   card2=11
   while test $card1 -gt 10 -o $card2 -gt 10; do
    card1=$((${RANDOM} % (${hand}-3) + 2))
    card2=$((${hand} - ${card1}))
   done
  elif [ ${type} = "soft" ]; then
   t="s"
   # one card is an ace
   card1=1
   card2=$((${hand} - 10 - ${card1}))
  fi

  cat << EOF >> ${type}.html
 <tr>
  <td>${t}${hand}</td>
  <td>
   <div class="text-right">s<span class="d-none d-lg-inline">tand</span></div>
   <div class="text-right">h<span class="d-none d-lg-inline">it</span></div>
   <div class="text-right">d<span class="d-none d-lg-inline">ouble</span></div>
  </td>
EOF
  
  for upcard in `seq 2 9` T A; do
  
   if [ "$upcard" = "T" ]; then
     upcard_n=10
   elif [ "$upcard" = "A" ]; then
     upcard_n=1
   else
     upcard_n=$(($upcard))
   fi
 
   n=1000    # start with n hands
   best="x"  # x means don't know what to so, so play
   
   while [ "${best}" = "x" ]; do
    # tell the user which combination we are trying and how many we will play
    echo -n ${t}${hand}-${upcard} \($card1 $card2\) "n="${n}
   
    for play in s d h; do
     
     # start with options.conf as a template and add some custom stuff
     cp options.conf blackjack.conf
     cat << EOF >> blackjack.conf
hands = ${n}
dealer2player = internal
arranged_cards = ${card1} $((${upcard_n} + 13)) $((${card2} + 26))
yaml_report = ${t}${hand}-${upcard}-${play}.yaml
#log = ${t}${hand}-${upcard}-${play}.log
EOF
 
     # read the current strategy
     while read w p2 p3 p4 p5 p6 p7 p8 p9 pT pA; do
      # w already has the "h" or the "s"
      strategy[${w},2]=$p2   
      strategy[${w},3]=$p3
      strategy[${w},4]=$p4    
      strategy[${w},5]=$p5    
      strategy[${w},6]=$p6    
      strategy[${w},7]=$p7    
      strategy[${w},8]=$p8    
      strategy[${w},9]=$p9    
      strategy[${w},T]=$pT    
      strategy[${w},A]=$pA    
     done < ${type}.txt
     
     # override the read strategy with the explicit play: s, d or h
     strategy[${t}${hand},${upcard}]=${play}
     
     # save the new (temporary) strategy
     rm -f ${type}.txt
     for h in `seq 20 -1 ${min[${type}]}`; do
      echo -n "${t}${h}  " >> ${type}.txt
      
      # extra space if h < 10
      if [ ${h} -lt 10 ]; then
       echo -n " " >> ${type}.txt
      fi 
      
      for u in `seq 2 9` T A; do
       echo -n "${strategy[${t}${h},${u}]}  " >> ${type}.txt
      done
      echo >> ${type}.txt
     done
     
     # debug, comment for production
     if [ "${debug}" != "0" ]; then
      cp ${type}.txt ${t}${hand}-${upcard}-${play}.str
     fi
    
     # ensamble the full bs.txt with no pairing
     cat hard.txt soft.txt pair-no.txt > bs.txt
    
     # play!
     blackjack > /dev/null
    
     # evaluate the results
     ev[${t}${hand},${upcard},${play}]=`grep return ${t}${hand}-${upcard}-${play}.yaml | awk '{printf("%+g", $2)}'`
     error[${t}${hand},${upcard},${play}]=`grep error ${t}${hand}-${upcard}-${play}.yaml | awk '{printf("%.1g", $2)}'`
     
    done
   
    # choose the best one
    ev_s=`printf %g ${ev[${t}${hand},${upcard},s]}`
    ev_d=`printf %g ${ev[${t}${hand},${upcard},d]}`
    ev_h=`printf %g ${ev[${t}${hand},${upcard},h]}`
   
    
    if [ $n -le 999999 ]; then 
     # if we still have room, take into account errors
     error_s=${error[${t}${hand},${upcard},s]}
     error_d=${error[${t}${hand},${upcard},d]}
     error_h=${error[${t}${hand},${upcard},h]}
    else
     # instead of running infinite hands, above a threshold asume errors are zero
     error_s=0
     error_d=0
     error_h=0
    fi  
 
    echo -ne "\ts=${ev_s} (${error_s})"
    echo -ne "\td=${ev_d} (${error_d})"
    echo -ne "\th=${ev_h} (${error_h})"
   
    if   (( $(echo "${ev_s}-${error_s} > ${ev_d}+${error_d}" | bc -l) )) &&
         (( $(echo "${ev_s}-${error_s} > ${ev_h}+${error_h}" | bc -l) )); then
     best="s"
     echo -e "\tstand"
    elif (( $(echo "${ev_d}-${error_d} > ${ev_s}+${error_s}" | bc -l) )) &&
         (( $(echo "${ev_d}-${error_d} > ${ev_h}+${error_h}" | bc -l) )); then
     best="d"
     echo -e "\tdouble"
    elif (( $(echo "${ev_h}-${error_h} > ${ev_s}+${error_s}" | bc -l) )) &&
         (( $(echo "${ev_h}-${error_h} > ${ev_d}+${error_d}" | bc -l) )); then
     best="h"
     echo -e "\thit"
    else
     best="x"
     n=$((${n} * 10))
     echo -e "\tuncertain"
    fi
   done

   strategy[${t}${hand},${upcard}]=${best}
   
   
   
   echo "| ${t}${hand}-${upcard} | ${n} | ${ev_s} (${error_s}) | ${ev_h} (${error_h}) | ${ev_d} (${error_d}) |" >> table.md
   
   echo " <!-- ${upcard} -->" >> ${type}.html
   echo " <td>" >> ${type}.html
   echo ${ev_s} ${error_s} | awk -f cell.awk >> ${type}.html
   echo ${ev_h} ${error_h} | awk -f cell.awk >> ${type}.html
   echo ${ev_d} ${error_d} | awk -f cell.awk >> ${type}.html
   echo " </td>" >> ${type}.html
   
   
   # save the strategy again with the best strategy
   rm -f ${type}.txt
   for h in `seq 20 -1 ${min[${type}]}`; do
    echo -n "${t}${h}  " >> ${type}.txt
    
    # extra space if h < 10
    if [ ${h} -lt 10 ]; then
     echo -n " " >> ${type}.txt
    fi 
    
    for u in `seq 2 9` T A; do
     echo -n "${strategy[${t}${h},${u}]}  " >> ${type}.txt
    done
    
    echo >> ${type}.txt
    
   done
  done
  
  echo "</tr>" >> ${type}.html
  
 done
done


cat << EOF >> table.md


| Hand | \$n\$ |  Yes  |  No  |
| ---- | ----- | ----- | ---- |
EOF

# pairs
type="pair"
t="p"
cp pair-no.txt pair.txt

for hand in A T `seq 9 -1 2`; do
 if [ "${hand}" = "A" ]; then
  pair=1
 elif [ "${hand}" = "T" ]; then
  pair=10
 else
  pair=$((${hand}))
 fi
  
 cat << EOF >> ${type}.html
 <tr>
  <td>${t}${hand}</td>
  <td>
   <div class="text-right">y<span class="d-none d-lg-inline">es</span></div>
   <div class="text-right">n<span class="d-none d-lg-inline">o</span></div>
  </td>
EOF
  
 for upcard in `seq 2 9` T A; do
  if [ "$upcard" = "T" ]; then
    upcard_n=10
  elif [ "$upcard" = "A" ]; then
    upcard_n=1
  else
    upcard_n=$(($upcard))
  fi
 
  n=1000    # start with n hands
  best="x"  # x means don't know what to so, so play
   
  while [ "${best}" = "x" ]; do
   # tell the user which combination we are trying and how many we will play
   echo -n ${t}${hand}-${upcard} "n="${n}
   
   for play in y n; do
     
    # start with options.conf as a template and add some custom stuff
    cp options.conf blackjack.conf
    cat << EOF >> blackjack.conf
hands = ${n}
dealer2player = internal
arranged_cards = ${pair} $((${upcard_n} + 13)) $((${pair} + 26))
yaml_report = ${t}${hand}-${upcard}-${play}.yaml
log = ${t}${hand}-${upcard}-${play}.log
EOF
 
    # read the current strategy
    while read w p2 p3 p4 p5 p6 p7 p8 p9 pT pA; do
     # w already has the "p"
     strategy[${w},2]=$p2   
     strategy[${w},3]=$p3
     strategy[${w},4]=$p4    
     strategy[${w},5]=$p5    
     strategy[${w},6]=$p6    
     strategy[${w},7]=$p7    
     strategy[${w},8]=$p8    
     strategy[${w},9]=$p9    
     strategy[${w},T]=$pT    
     strategy[${w},A]=$pA    
    done < ${type}.txt
     
    # override the read strategy with the explicit play: y or n
    strategy[${t}${hand},${upcard}]=${play}
     
    # save the new (temporary) strategy
    rm -f ${type}.txt
    for h in A T `seq 9 -1 2`; do
     echo -n "${t}${h}   " >> ${type}.txt
     for u in `seq 2 9` T A; do
      echo -n "${strategy[${t}${h},${u}]}  " >> ${type}.txt
     done
     echo >> ${type}.txt
    done
     
    if [ "${debug}" != "0" ]; then
     cp ${type}.txt ${t}${hand}-${upcard}-${play}.str
    fi  
    
    # ensamble the full bs.txt
    cat hard.txt soft.txt pair.txt > bs.txt
    
    # play!
    blackjack > /dev/null
    
    # evaluate the results
    ev[${t}${hand},${upcard},${play}]=`grep return ${t}${hand}-${upcard}-${play}.yaml | awk '{printf("%+g", $2)}'`
    error[${t}${hand},${upcard},${play}]=`grep error ${t}${hand}-${upcard}-${play}.yaml | awk '{printf("%.1g", $2)}'`
    
   done
   
   # choose the best one
   ev_y=`printf %g ${ev[${t}${hand},${upcard},y]}`
   ev_n=`printf %g ${ev[${t}${hand},${upcard},n]}`
   
   if [ $n -le 999999 ]; then 
    # if we still have room, take into account errors
    error_y=${error[${t}${hand},${upcard},y]}
    error_n=${error[${t}${hand},${upcard},n]}
   else
    # instead of running infinite hands, above a threshold asume errors are zero
    error_y=0
    error_n=0
   fi  
 
   echo -ne "\ty=${ev_y} (${error_y})"
   echo -ne "\tn=${ev_n} (${error_n})"
   
   if   (( $(echo "${ev_y}-${error_y} > ${ev_n}+${error_n}" | bc -l) )); then
    best="y"
    echo -e "\tyes"
   elif (( $(echo "${ev_n}-${error_n} > ${ev_y}+${error_y}" | bc -l) )); then
    best="n"
    echo -e "\tno"
   else
    best="x"
    n=$((${n} * 10))
    echo -e "\tuncertain"
   fi
  done

  echo "| ${t}${hand}-${upcard} | ${n} | ${ev_y} (${error_y}) | ${ev_n} (${error_n}) |" >> table.md
  
  echo " <!-- ${upcard} -->" >> ${type}.html
  echo " <td>" >> ${type}.html
  echo ${ev_y} ${error_y} | awk -f cell.awk >> ${type}.html
  echo ${ev_n} ${error_n} | awk -f cell.awk >> ${type}.html
  echo " </td>" >> ${type}.html
  
  
  strategy[${t}${hand},${upcard}]=${best}
   
  # save the strategy again with the best strategy
  rm -f ${type}.txt
  for h in A T `seq 9 -1 2`; do
   echo -n "${t}${h}   " >> ${type}.txt
   for u in `seq 2 9` T A; do
    echo -n "${strategy[${t}${h},${u}]}  " >> ${type}.txt
   done
   echo >> ${type}.txt
  done
 done
done

 
cat header.txt hard.txt header.txt soft.txt header.txt pair.txt > bs.txt
if [ "${debug}" == "0" ]; then
 rm -f *.yaml
 rm -f *.str
 rm -f *.log
fi
 
@end verbatim

@bye
